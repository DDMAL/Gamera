from distutils.core import setup, Extension
from distutils.util import get_platform
from distutils.sysconfig import get_python_lib
import sys, os, time, locale, string
import glob

# If gamera.generate is imported gamera.__init__.py will
# also be imported, which won't work until the build is
# finished. To get around this, the gamera directory is
# added to the path and generate is imported directly
sys.path.append("gamera")
import generate

##########################################
# generate the plugins

# we grab all of the plugins except __init__.py - of course
# to exclude this we have to go throug all sorts of crap . . .
plugins = glob.glob("gamera/plugins/*.py")
norm_plugins = []
for x in plugins:
    norm_plugins.append(os.path.normpath(os.path.abspath(x)))
plugins = norm_plugins
try:
    path = os.path.normpath(os.path.abspath("gamera/plugins/__init__.py"))
    plugins.remove(path)
except:
    pass

# Create the list of modules to ignore at import - because
# we are in the middle of the build process a lot of C++
# plugins don't yet exist. By preventing the import of
# the core of gamera and all of the plugins we allow the
# plugins to be imported for the build process to examine
# them.
ignore = ["core", "gamera.core", "gameracore"]
for x in plugins:
    plug_path, filename = os.path.split(x)
    module_name = "_" + filename.split('.')[0]
    ignore.append(module_name)
generate.magic_import_setup(ignore)

plugin_extensions = []
for x in plugins:
    print x
    extension = generate.generate_plugin(x)
    if not extension is None:
        plugin_extensions.append(extension)

generate.restore_import()

########################################
# Check that this is at least Python 2.2
if float(string.join([str(x) for x in sys.version_info[0:3]], '')) < 221:
    print "Gamera requires Python version 2.2.1 or later."
    print "You are running the following Python version:"
    print sys.version
    sys.exit(1)

########################################
# Generate the command line scripts based on the running version of Python
command_line_utils = {
    'gamera_gui':
    """#!%(executable)s\n"""
    """%(header)s\n"""
    """print "Loading GAMERA..."\n"""
    """from gamera.gui import gui\n"""
    """gui.run()""",

    'gamera_cl':
    """#!/usr/bin/env sh\n"""
    """%(header)s\n"""
    """%(executable)s -i -c "from gamera.core import *; init_gamera()"\n""",

    'gamera_test':
    """#!%(executable)s\n"""
    """from gamera import testing\n"""
    """testing.main()"""
    }

#if os.name == 'posix':
info = {'executable': sys.executable,
        'header'    :
        """# This file was automatically generated by the\n"""
        """# Gamera setup script on %s.\n""" } #%
        #time.strftime(locale.nl_langinfo(locale.D_FMT))}
for file, content in command_line_utils.items():
    fd = open(file, 'w')
    fd.write(content % info)
    fd.close()
    os.chmod(file, 0700)

########################################
# Distutils setup

ga_files = glob.glob("src/ga/*.C")
ga_files.append("src/knncoremodule.cpp")

extensions = [Extension("gamera.gameracore",
                        ["src/gameramodule.cpp",
                         "src/sizeobject.cpp",
                         "src/pointobject.cpp",
                         "src/dimensionsobject.cpp",
                         "src/rectobject.cpp",
                         "src/regionobject.cpp",
                         "src/regionmapobject.cpp",
                         "src/rgbpixelobject.cpp",
                         "src/imagedataobject.cpp",
                         "src/imageobject.cpp",
                         "src/imageinfoobject.cpp"
                         ],
                        include_dirs=["include"],
                        # FIXME
                        libraries=["stdc++"]),
              Extension("gamera.knncore", ga_files,
                        include_dirs=["include", "src/ga", "src"], libraries=["stdc++"])]
extensions.extend(plugin_extensions)

setup(name = "gameracore", version="1.1",
      ext_modules = extensions,
      packages = ['gamera', 'gamera.gui', 'gamera.plugins', 'gamera.toolkits',
                  'gamera.toolkits.omr']
      )

##########################################
# generate the non-plugin help pages
# This needs to be done last since it requires a built system
if 'build' in sys.argv:
    # This is where things just got built
    sys.path.append("build/lib.%s-%s/gamera" % (get_platform(), sys.version[0:3]))
    import generate_help
    generate_help.generate_help()
