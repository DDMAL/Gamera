#!/usr/bin/env python

# vi:set tabsize=3:
#
# Copyright (C) 2001-2004 Ichiro Fujinaga, Michael Droettboom,
#                         and Karl MacMillan
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
#

# This is a total hack to patch up an error in distutils.command.bdist_rpm
import distutils.command.bdist_rpm
def run(self):
   try:
      original_run(self)
   except AssertionError, e:
      if str(e).startswith("unexpected number of RPM files found"):
         rpms = glob.glob(os.path.join(os.path.join(self.rpm_base, 'RPMS'),
                                       "*/*.rpm"))
         for rpm in rpms:
            self.move_file(rpm, self.dist_dir)
      else:
         raise e
original_run = distutils.command.bdist_rpm.bdist_rpm.run
setattr(distutils.command.bdist_rpm.bdist_rpm, 'run', run)

from distutils.core import setup, Extension
from distutils.util import get_platform
from distutils.sysconfig import get_python_lib

import sys, os, glob

# If gamera.generate is imported gamera.__init__.py will
# also be imported, which won't work until the build is
# finished. To get around this, the gamera directory is
# added to the path and generate is imported directly
sys.path.append("gamera")
import generate, gamera_setup

########################################
# Check that the Python version is correct
gamera_setup.check_python_version()

########################################
# Some platforms require extra compile and link arguments
extras = {}
if sys.platform == 'win32' and not '--compiler=mingw32' in sys.argv:
   extras['extra_compile_args'] = ["/GR"]#, "/Zi"]
elif sys.platform == 'darwin':
   extras['extra_link_args'] = ['-F/System/Library/Frameworks/']
elif '--compiler=mingw32' in sys.argv or not sys.platform == 'win32':
   extras['libraries'] = ["stdc++"] # Not for intel compiler

##########################################
# generate the command line startup scripts
command_line_utils = (
   ('gamera_gui', 'gamera_gui.py',
    """#!%(executable)s
%(header)s
print "Loading GAMERA..."
try:
   from gamera.gui import gui
   gui.run()
except:
   import traceback
   print "Gamera made a fatal error:"
   print
   traceback.print_exc()
   print
   print "Press <ENTER> to exit."
   x = raw_input()
   """), )
   
if sys.platform == 'win32':
   command_line_filename_at = 1
   scripts_directory_name = "Scripts"
else:
   command_line_filename_at = 0
   scripts_directory_name = "bin/"

scripts = [x[command_line_filename_at] for x in command_line_utils] + ['gamera_post_install.py']

info = {'executable': sys.executable,
        'header'    :
        """# This file was automatically generated by the\n"""
        """# Gamera setup script on %s.\n""" } #%
for util in command_line_utils:
   if sys.platform == 'win32':
      _, file, content = util
   else:
      file, _, content = util
   fd = open(file, 'w')
   fd.write(content % info)
   fd.close()
os.chmod(file, 0700)

########################################
# Distutils setup

ga_files = glob.glob("src/ga/*.cpp")
ga_files.append("src/knncoremodule.cpp")
graph_files = glob.glob("src/graph/*.cpp")

##########################################
# generate the plugins
plugin_extensions = []
plugins = gamera_setup.get_plugin_filenames('gamera/plugins/')
plugin_extensions = gamera_setup.generate_plugins(
   plugins, "gamera.plugins", 1, **extras)

extensions = [Extension("gamera.gameracore",
                        ["src/gameramodule.cpp",
                         "src/sizeobject.cpp",
                         "src/pointobject.cpp",
                         "src/dimensionsobject.cpp",
                         "src/rectobject.cpp",
                         "src/regionobject.cpp",
                         "src/regionmapobject.cpp",
                         "src/rgbpixelobject.cpp",
                         "src/imagedataobject.cpp",
                         "src/imageobject.cpp",
                         "src/imageinfoobject.cpp"
                         ],
                        include_dirs=["include"],
                        **extras
                        ),
              Extension("gamera.knncore", ga_files,
                        include_dirs=["include", "src/ga", "src"],
                        **extras),
              Extension("gamera.graph", graph_files,
                        include_dirs=["include", "src", "src/graph"],
                        **extras)]
extensions.extend(plugin_extensions)

description = ("This is the Gamera installer. " +
               "Please ensure that Python and wxPython 2.4.0 " +
               "(or later) are installed before proceeding.")

lib_path = os.path.join(get_python_lib(), 'gamera')
include_path = "include/gamera/"
includes = [(os.path.join(include_path, a), glob.glob(os.path.join("include/", os.path.join(a, b)))) for a, b in
            ("", "*.hpp"),
            ("plugins", "*.hpp"),
            ("vigra", "*.hxx")]
            
setup(name = "gamera", version=open("version", 'r').readlines()[0].strip(),
      url = "http://gamera.sourceforge.net/",
      author = "Michael Droettboom and Karl MacMillan",
      author_email = "gamera-users@lists.sourceforge.net",
      ext_modules = extensions,
      description = description,
      packages = ['gamera', 'gamera.gui', 'gamera.plugins'],
      scripts = scripts,
      data_files=[(os.path.join(lib_path, "test"), glob.glob("gamera/test/*.tiff"))] + includes)
