#!/usr/bin/env python
from distutils.core import setup, Extension
from distutils.util import get_platform
from distutils.sysconfig import get_python_lib
import sys, os, time, locale, string
import glob

# If gamera.generate is imported gamera.__init__.py will
# also be imported, which won't work until the build is
# finished. To get around this, the gamera directory is
# added to the path and generate is imported directly
sys.path.append("gamera")
import generate, gamera_setup

########################################
# Check that this is at least Python 2.2
gamera_setup.check_python_version()

##########################################
# generate the plugins

plugin_extensions = []

# we grab all of the plugins except __init__.py - of course
# to exclude this we have to go throug all sorts of crap...
command_line_utils = (
   ('gamera_gui', 'gamera_gui.py',
    """#!%(executable)s\n"""
    """%(header)s\n"""
    """import gamera_post_install\n"""
    """print "Loading GAMERA..."\n"""
    """from gamera.gui import gui\n"""
    """gui.run()"""),
   
   ('gamera_cl', 'gamera_cl.py',
    """#!/usr/bin/env sh\n"""
    """%(header)s\n"""
    """import gamera_post_install\n"""
    """print "Loading GAMERA..."\n"""
    """%(executable)s -i -c "from gamera.core import *; init_gamera()"\n"""
    ),
   
   ('gamera_test', 'gamera_test.py',
    """#!%(executable)s\n"""
    """import gamera_post_install"""
    """from gamera import testing\n"""
    """testing.main()"""
    )
   )
if sys.platform == 'win32':
   command_line_filename_at = 1
else:
   command_line_filename_at = 0
scripts = [x[command_line_filename_at] for x in command_line_utils] + ["gamera_post_install.py"]

if 'build' in sys.argv:
   plugins = gamera_setup.get_plugin_filenames('gamera/plugins/')
   plugin_extensions = gamera_setup.generate_plugins(
      plugins, "gamera.plugins", 1)


   ########################################
   # Generate the command line scripts based on the running version of Python

   #if os.name == 'posix':
   info = {'executable': sys.executable,
           'header'    :
           """# This file was automatically generated by the\n"""
           """# Gamera setup script on %s.\n""" } #%
      #time.strftime(locale.nl_langinfo(locale.D_FMT))}
   for util in command_line_utils:
      if sys.platform == 'win32':
         _, file, content = util
      else:
         file, _, content = util
      fd = open(file, 'w')
      fd.write(content % info)
      fd.close()
   os.chmod(file, 0700)

########################################
# Distutils setup

ga_files = glob.glob("src/ga/*.cpp")
ga_files.append("src/knncoremodule.cpp")

graph_files = glob.glob("src/graph/*.cpp")

libs = []
if '--compiler=mingw32' in sys.argv or not sys.platform == 'win32':
   libs = ["stdc++"] # Not for intel compiler

extra_args = []
if sys.platform == 'win32' and not '--compiler=mingw32' in sys.argv:
   extra_args = ["/GR", "/Zi"]
   
extensions = [Extension("gamera.gameracore",
                        ["src/gameramodule.cpp",
                         "src/sizeobject.cpp",
                         "src/pointobject.cpp",
                         "src/dimensionsobject.cpp",
                         "src/rectobject.cpp",
                         "src/regionobject.cpp",
                         "src/regionmapobject.cpp",
                         "src/rgbpixelobject.cpp",
                         "src/imagedataobject.cpp",
                         "src/imageobject.cpp",
                         "src/imageinfoobject.cpp"
                         ],
                        include_dirs=["include"],
                        # FIXME
                        libraries=libs, extra_compile_args=extra_args
                        ),
              Extension("gamera.knncore", ga_files,
                        include_dirs=["include", "src/ga", "src"],
                        libraries=libs, extra_compile_args=extra_args),
              Extension("gamera.graph", graph_files,
                        include_dirs=["include", "src", "src/graph"],
                        libraries=libs, extra_compile_args=extra_args)]
extensions.extend(plugin_extensions)

if sys.platform == "win32":
   description = ("""This is the Gamera installer.\n""" + 
   """Please make sure you have Python 2.2 (or later) and wxPython 2.4.0 \n""" +
   """(or later) installed before proceeding with the installation.  After\n""" +
   """the installer completes, run the 'gamera_post_install' script in\n""" +
   """'Scripts' directory of your Python installation.""")
else:
   description = "Welcome to Gamera.  Please ensure that Python 2.2 (or later) and wxPython 2.4.0 (or later) are installed before proceeding."

setup(name = "gamera", version="2.0",
      url = "http://dkc.jhu.edu/gamera/",
      author = "Michael Droettboom and Karl MacMillan",
      author_email = "mdboom@jhu.edu; karlmac@jhu.edu",
      ext_modules = extensions,
      description = description,
      packages = ['gamera', 'gamera.gui', 'gamera.plugins', 'gamera.toolkits'],
      data_files=[('include/gamera', glob.glob("include/*.hpp")),
                  ('include/gamera/plugins', glob.glob("include/plugins/*.hpp")),
                  ('include/gamera/vigra', glob.glob("include/vigra/*.hxx")),
                  ('gamera/doc', glob.glob("gamera/doc/*.html")),
                  ('gamera/doc/classes', glob.glob("gamera/doc/classes/*.html")),
                  ('gamera/doc/plugins', glob.glob("gamera/doc/plugins/*.html")),
                  ('Scripts', scripts)]
      )

##########################################
# generate the non-plugin help pages
# This needs to be done last since it requires a built system
if 'build' in sys.argv:
   # This is where things just got built
   sys.path.append("build/lib.%s-%s/gamera" %
                   (get_platform(), sys.version[0:3]))
   import generate_help
   generate_help.generate_help()
