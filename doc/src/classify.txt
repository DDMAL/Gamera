=====================
Gamera classifier API
=====================

Introduction
------------

For manual training of a classifier, you will generally want to use
the `interactive classifier GUI`__.  This document describes the
programming API that is used by scripts that make use of a classifier.

.. __: gui.html#interactive-classifier-window

Gamera supports segmentation-based image classification.  This means
that the page image is first segmented into individual connected
components (or glyphs).  Each of these glyphs has a number of features
generated from it.  These features (collectively called a "feature
vector") are then sent to a classifier which, using a database of
training data, identifies the glyph.

Interactive vs. Noniteractive classifiers
'''''''''''''''''''''''''''''''''''''''''

All classifiers in Gamera support the same core Classifier API (interface), so
they are interchangeable.  There is an important
distinction between two families of classifiers, however:

Interactive classifier
  An interactive classifier can have training examples added to it in
  real time, and the results used immediately to classify glyphs.
  Interactive classifiers are useful during the training process since
  the classifier can be "boot strapped" with a few examples and refined
  interactively. 

Noninteractive classifier
  Noninteractive classifiers take a complete database of
  training data and then create an optimised data structure for
  classification.  Because building that data structure can take a
  considerable amount of time, new training examples cannot be added
  on the fly.  In addition, noninteractive classifiers are
  serializable to binary classifier-specific file formats, which save
  and load much faster than the Gamera XML format.

Types of classifiers
''''''''''''''''''''

Within each of these families, different classifiers are available.
These "concrete" classifiers have additional methods specific to the
particular classifier type.  The currently implemented classifiers
are:

 - kNNInteractive_
     Interactive *k* nearest neighbor classifier.

 - kNNNonInteractive_
     Noninteractive *k* nearest neighbor classifier.  The weights of
     the dimensions can be optimised using a genetic algorithm.

     For a user-friendly way to perform GA optimization, consider the Biollante_
     tool in the Gamera GUI.

.. _Biollante: gui.html#classifier-optimization-biollante


Classifying images without a classifier
---------------------------------------

``id_name``
'''''''''''

When a glyph is classified, either by a manual classification or an
automatic classifier, its classification is stored in the member variable
``id_name``.  This variable is actually a list of possible
classifications, so that a classifier can return a number of different
possibilities with different confidences.  Each classification entry
is a tuple of the form (float *confidence*, string *name*).  The
confidence value is in the range 0.0 - 1.0, where 1.0 is most confident.

For example, if a symbol is most likely a lower-case *b*, but might
also be a lower-case *d*, its ``id_name`` variable might be:

.. code:: Python
  
  [(0.8, 'lower.b'), (0.2, 'lower.d')]

``classification_state``
''''''''''''''''''''''''

How a glyph was classified is managed by the ``classification_state``
member variable.  It can be one of the following values:

  +----------+--------------+-----------------------------------------------------+
  | Color    | Constant     | Description                                         |
  +==========+==============+=====================================================+
  | |UColor| | UNCLASSIFIED | The connected component is completely unclassified. |
  | (white)  |              |                                                     |
  +----------+--------------+-----------------------------------------------------+
  | |AColor| | AUTOMATIC    | The connected component was classified by the       | 
  | (red)    |              | automatic classifier using training data.           |
  +----------+--------------+-----------------------------------------------------+
  | |HColor| | HEURISTIC    | The connected component was classified by some      |
  | (yellow) |              | heuristic (non-exemplar-based) process.             |
  +----------+--------------+-----------------------------------------------------+
  | |MColor| | MANUAL       | The connected component was classified by a human.  |
  | (green)  |              |                                                     |
  +----------+--------------+-----------------------------------------------------+

.. |UColor| image:: images/unclassified_color.png
.. |AColor| image:: images/autoclassified_color.png
.. |HColor| image:: images/heuristicclassified_color.png
.. |MColor| image:: images/manualclassified_color.png

Methods
'''''''

Images have a number of methods for managing their classification
state.  Use of these methods is highly recommended over changing the
``id_name`` variable directly.  These methods are documented is the
`classification section of the plugin documentation`__.

.. __: plugins.html#classification

The classifier interface
------------------------

This section describes each method of the classifier interface.
They are divided into two categories:

Core
  Methods available to all classifiers

Interactive
  Methods available only to interactive classifiers

Core
''''

The following methods are available to all classifiers.

Initialization
``````````````

``__init__``
............

**Classifier** (ImageList *database* = ``[]``, *features* = ``'all'``,
bool *perform_splits* = ``True``)

Creates a new classifier instance.

*database*
        Any images in the list that were manually classified (have
	classification_state == MANUAL) will be used as training data
	for the classifier.  Any UNCLASSIFIED or AUTOMATICALLY
	classified images will be ignored.

	When initializing a noninteractive classifier, the database
	*must* be non-empty.

*features*
	A list of feature function names to use for classification.
	These feature names
	correspond to the `feature plugin methods`__.  To use all
	available feature functions, pass in ``'all'``.

.. __: plugins.html#features

*perform_splits*
	  If ``perform_splits`` is ``True``, glyphs trained with names
	  beginning with ``_split.`` are run through a given splitting
	  algorithm.  For instance, glyphs that need to be broken into
	  upper and lower halves for further classification of those
	  parts would be trained as ``_split.splity``.  When the
	  automatic classifier encounters glyphs that most closely
	  match those trained as ``_split``, it will perform the
	  splitting algorithm and then continue to recursively
	  classify its parts.

	  The `splitting algorithms`__ are documented in the plugin documentation.

.. __: plugins.html#segmentation

          New splitting algorithms can be created by `writing plugin`__ methods
          in the category ``Segmentation``.  

.. __: writing_plugins.html

Classification
``````````````

``classify_glyph_automatic``
............................

**classify_glyph_automatic** (Image *glyph*)

Classifies a glyph and sets its ``classification_state`` and ``id_name``.
(If you don't want the glyph changed, use
guess_glyph_automatic_.)

Returns a 2-tuple (pair) of lists: (*add*, *remove*).  *add* is a list of
glyphs that were created by classifying *glyph* as a split (See
Initialization_).  *remove* is a list of glyphs that are no longer valid due
to reclassifying *glyph* from a split to something else.  Most
often, both of these lists will be empty.  You will normally want to
use these lists to update the collection of glyphs on the current
page.

*glyph*
  The glyph to classify.

``classify_list_automatic``
...........................

**classify_list_automatic** (ImageList *glyphs*, Int *max_recursion* =
``10``)

Classifies a list of glyphs and sets the classification_state and
id_name of each glyph.  (If you don't want it set, use
guess_glyph_automatic_.)

The list *glyphs* is never modified by the function.  Instead, it
returns a 2-tuple (pair) of lists: (*add*, *remove*).  *add* is a list
of glyphs that were created by classifying any glyphs as a split (See
Initialization_).  *remove* is a list of glyphs that are no longer
valid due to reclassifying glyphs from a split to something else.
Most often, both of these lists will be empty.  You will normally want
to use these lists to update the collection of glyphs on the current
page.  If you just want a new list returned with these updates already
made, use classify_and_update_list_automatic_.

*glyphs*
  A list of glyphs to classify.

*max_recursion*
  The maximum level of recursion to follow when splitting glyphs.
  Since some glyphs will split into parts that then classify as
  ``_split`` in turn, a maximum depth should be set to avoid infinite
  recursion.  This number can normally be set quite low, depending on
  the application.

``classify_and_update_list_automatic``
......................................

**classify_and_update_list_automatic** (ImageList *glyphs*, Int
*max_recursion* = ``10``)

A convenience wrapper around classify_list_automatic_ that returns
a list of glyphs with all the splitting updates already made.

``guess_glyph_automatic``
.........................

id_name **guess_glyph_automatic** (Image *glyph*)

Classifies the given *glyph* without setting its classification.  The
return value is of the form of `id_name`__.

.. __: #id-name

Grouping
````````

Often, characters do not cleanly correspond to connected components.
For instance, broken or degraded printing may disconnect parts of a
character, or characters, such as *i* may always be made up of two
connected components.  The grouping algorithm is designed to deal with
those cases.  It attempts to group connected components with others
nearby in order to create groupings that are more like glyphs in the
database.  Needless to say, this approach is much slower than the
"one-connected-component-at-a-time" approach, but can produce
considerably better results on certain images.

To train for grouping, images corresponding to the entire character
must exist in the database.  For instance, in the Gamera GUI, one
would select both the dot and stem of a lower-case *i* and train it as
``_group.lower.i``.  This will join the two connected components into
a single image and then add it to the database.

The algorithm is described in more detail in our paper on `correcting
broken characters`__ (PDF).

.. __: http://dkc.jhu.edu/gamera/papers/droettboom_broken_characters.pdf

``group_list_automatic``
........................

**group_list_automatic** (ImageList *glyphs*, Function
*grouping_function* = ``None``, Function *evaluate_function* = ``None``,
int *max_size* = 5)

Classifies the given list of glyphs.  Adjacent glyphs are joined
together if doing so results in a higher global confidence.  Each part
of a joined glyph is classified as HEURISTIC with the prefix
``_group``.

The list *glyphs* is never modified.  Instead, the function returns a
2-tuple (pair) of lists: (*add*, *remove*).  *add* is a list of glyphs
that were created by classifying any glyphs as a split (See
Initialization_) or grouping.  *remove* is a list of glyphs that are
no longer valid due to reclassifying glyphs from a split to something
else.

*glyphs*
  The list of glyphs to group and classify.

*grouping_function*
  A function that determines how glyphs are initially
  combined.  This function must take exactly two arguments, which the
  grouping algorithm will pass an arbitrary pair of glyphs from
  *glyphs*.  If the two glyphs should be considered for grouping, the
  function should return ``True``, else ``False``.  

  If no *grouping_function* is provided, a default one will be used.

*evaluate_function*
   A function that evaluates a grouping of glyphs.  This function must
   take exactly one argument which is a list of glyphs.  The function
   should return a confidence value between 0 and 1 (1 being most
   confident) representing how confidently the grouping forms a valid
   character.

   If no *evaluate_function* is provided, a default one will be used.

*max_size*
   The maximum number of connected components that will be grouped
   together and tested as a group.  For performance reasons, this
   number should be kept relatively small.

Saving and loading
``````````````````

These functions deal with saving and loading the training data of the
classifier to/from the `Gamera XML format`__.

.. __: xml_format.html

.. note:: UNCLASSIFIED glyphs in the training data are ignored
   (neither saved or loaded).

``to_xml``
..........

**to_xml** (stream *stream*)

Saves the training data in XML format to the given stream (which could
be a file handle or StringIO object).

``to_xml_filename``
...................

**to_xml_filename** (FileSave *stream*)

Saves the training data in XML format to the given filename.

``from_xml``
............

**from_xml** (stream *stream*)

Loads the training data from the given stream (which could be a file
handle or StringIO object).

``from_xml_filename``
.....................

**from_xml_filename** (stream *stream*)

Loads the training data from the given filename.

``merge_from_xml``
..................

**merge_from_xml** (stream *stream*)

Loads the training data from the given stream (which could be a file
handle or StringIO object) and adds it to the existing training data.

``merge_from_xml_filename``
...........................

**merge_from_xml_filename** (stream *stream*)

Loads the training data from the given filename and adds it to the
existing training data.

Settings
````````

``load_settings``
.................

**load_settings** (FileOpen *filename*)

Loads classifier-specific settings from the given filename.  The
format of this file is entirely depended on the concrete classifier
type.

``save_settings``
.................

**save_settings** (FileSave *filename*)

Saves classifier-specific settings to the given filename.  The
format of this file is entirely depended on the concrete classifier
type.

``serialize``
.............

**serialize** (FileSave *filename*)

Saves the classifier-specific settings *and* data in an optimized and
classifer-specific format.  

.. note:: 
   It is good practice to retain the XML
   file, since it is portable across platforms and to future versions of
   Gamera.  The binary format is not guaranteed to be portable.

``unserialize``
...............

**unserialize** (FileOpen *filename*)

Opens the classifier-specific settings *and* data from an optimized and
classifer-specific format.

Miscellaneous
`````````````

``is_interactive``
..................

**is_interactive** ()

Returns ``True`` if the classifier is interactive.

``get_glyphs``
..................

ImageList **get_glyphs** ()

Returns a list of all training examples.

``set_glyphs``
..............

**set_glyphs** (ImageList *glyphs*)

Sets the training data to the given list of glyphs.

On some non-interactive classifiers, this operation can be quite
expensive.

``merge_glyphs``
................

**merge_glyphs** (ImageList *glyphs*)

Adds the given glyphs to the current set of training data.

On some non-interactive classifiers, this operation can be quite
expensive.

``clear_glyphs``
................

**clear_glyphs** ()

Removes all training data.

Interactive classifiers
'''''''''''''''''''''''

Classification
``````````````

``classify_glyph_manual``
.........................

**classify_glyph_manual** (Image *glyph*, String *id*)

Sets the classification of the given *glyph* to the given *id* and
then adds the glyph to the training data.  Call this function when the
end user definitively knows the identity of the glyph.

*glyph*
	The glyph to classify.

*id*
	The class name.

.. note::
   Here *id* is a simple string, not of the `id_name`_ format, since
   the confidence of a manual classification is always 1.0.

``classify_list_manual``
........................

**classify_list_manual** (ImageList *glyphs*, String *id*)

Sets the classification of the given *glyphs* to the given *id* and
then adds the glyphs to the training data.  Call this function when the
end user definitively knows the identity of the glyphs.

If *id* begins with the special prefix ``_group``, all of the glyphs
in *glyphs* are combined and the result is added to the training
data.  This is useful for characters that always appear with multiple
connnected components, such as the lower-case *i*.

*glyphs*
	The glyphs to classify.

*id*
	The class name.

.. note::
   Here *id* is a simple string, not of the `id_name`_ format, since
   the confidence of a manual classification is always 1.0.

``display``
...........

**display** (ImageList *current_database* = ``[]``, Image
*context_image* = ``None``, List *symbol_table* = ``[]``)

Displays the `interactive classifier window`__, which is where manual
training usually takes place.

*current_database*
  A list of glyphs yet to be trained.

*context_image*
  An image of the page where the glyphs in *current_database* came
  from.

*symbol_table*
  A set of id names to insert by default into the symbol table.

.. __: gui.html#interactive-classifier-window

*k* Nearest Neighbor classifier
-------------------------------

The *k* Nearest Neighbor classifier is a concrete example of the
classifier API.  It adds some methods of its own.

``kNNNonInteractive`` has a number of advantages over
``kNNInteractive``:

- Each feature is normalized independently in the range (0, 1).  This
  reduces the bias toward features that generate large values, such as
  ``area``.  This normalization may change the classifications that
  the classifier makes, however.

- The weights of the features can be optimized using a genetic
  algorithm.  (See start_optimizing_).

  For a user-friendly way to perform GA optimization, consider the Biollante_
  tool in the Gamera GUI.

.. _Biollante: gui.html#classifier-optimization-biollante

- The training data can be serialized to a classifier-specific binary file
  format.  This format saves and loads much faster than the Gamera XML
  file format.

.. note:: 
   It is good practice to retain the XML
   file, since it is portable across platforms and to future versions of
   Gamera.  The binary format is not guaranteed to be portable.

All ``kNN`` classes
'''''''''''''''''''

``evaluate``
````````````

Float **evaluate** ()

Evaluate the performance of the kNN classifier using
leave-one-out cross-validation. The return value is a
floating-point number between 0.0 (0% correct) and 1.0 (100%
correct).

``kNNInteractive``
''''''''''''''''''

``noninteractive_copy``
```````````````````````

**noninteractive_copy** ()

Creates a non-interactive copy of the interactive classifier.

``kNNNonInteractive``
'''''''''''''''''''''

``start_optimizing``
````````````````````

**start_optimizing** ()

Starts the genetic algorithm optimization of the weights of the
features.  The optimization is run in a background thread.

For information about genetic algorithms, see [Holland1975]_.

In the genetic algorithm, the population consists of vectors of
feature weights.  The vectors are evaluated using the
leave_one_out_ algorithm.  The vectors that perform well are
allowed to reproduce to producing offspring using combination at a
randomly chosen split point.

For a user-friendly way to perform GA optimization, consider the Biollante_
tool in the Gamera GUI.

.. _Biollante: gui.html#classifier-optimization-biollante

``stop_optimizing``
```````````````````

**stop_optimizing** ()

Stops the background optimization thread.

``add_optimization_callback``
`````````````````````````````

**add_optimization_callback** (*function*)

Adds a function that will be called everytime the optimization process
improves the performance of the classifier.  This callback function must take
one argument which is an instance of the kNN classifier.

``remove_optimization_callback``
````````````````````````````````

**remove_optimization_callback** (*function*)

Removes an optimization callback function added using
add_optimization_callback_.

``leave_one_out``
`````````````````

float **leave_one_out** ()

Evaluates the database using the leave one out algorithm.

The leave one out algorithm works by successively choosing each
element in the database to be the element that is "left out".  That
element is classified using the remaining elements in the database.
The result of ``leave_one_out`` is the number of correctly classified
glyphs divided by the total number of glyphs.

References
----------

.. [Holland1975] Holland, J. H. 1975. *Adaptation in natural and
   artifical systems.*  University of Michigan Press, Ann Arbor.
