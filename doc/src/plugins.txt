=======
Plugins
=======

**Alphabetical list**

PNG_info_, abutaleb_threshold_, and_image_, area_, aspect_ratio_, bernsen_threshold_, black_area_, blue_, cc_analysis_, cc_and_cluster_, cie_x_, cie_y_, cie_z_, classify_automatic_, classify_heuristic_, classify_manual_, clip_image_, color_ccs_, compactness_, cyan_, dilate_, display_, display_ccs_, display_false_color_, draw_filled_rect_, draw_hollow_rect_, draw_line_, erode_, erode_dilate_, false_color_, fill_white_, filter_narrow_runs_, filter_short_runs_, filter_tall_runs_, filter_wide_runs_, from_rle_, gaussian_smoothing_, generate_features_, green_, histogram_, hue_, image_copy_, inkrub_, invert_, load_PNG_, load_image_, load_tiff_, magenta_, mask_, match_id_name_, mean_, moments_, most_frequent_black_horizontal_run_, most_frequent_black_vertical_run_, most_frequent_white_horizontal_run_, most_frequent_white_vertical_run_, nholes_, nholes_extended_, noise_, or_image_, otsu_find_threshold_, otsu_threshold_, outline_, permute_list_, polar_distance_, polar_match_, projection_cols_, projection_rows_, projections_, rank_, red_, resize_, rotateShear_, saturation_, save_PNG_, save_tiff_, scale_, skeleton_features_, splitx_, splitx_left_, splitx_max_, splitx_right_, splity_, splity_bottom_, splity_top_, thin_hs_, thin_lc_, thin_zs_, threshold_, tiff_info_, to_float_, to_grey16_, to_greyscale_, to_onebit_, to_rgb_, to_rle_, to_xml_, to_xml_filename_, top_bottom_, unclassify_, union_images_, value_, volume_, volume16regions_, volume64regions_, wave_, xor_image_, yellow_, zernike_moments_
   
Analysis
========

``histogram``
-------------

FloatVector **histogram** ()


:Operates on: ``Image [GreyScale|Grey16]``
:Returns: ``FloatVector``
:Category: Analysis
:Defined in: image_utilities.py
:Author: Michael Droettboom and Karl MacMillan


Compute the histogram of the pixel values in the given image.
Returns a Python array of doubles, with each value being a percentage.

If the GUI is being used, the histogram is displayed.

.. image:: images/histogram.png


``projection_cols``
-------------------

IntVector **projection_cols** ()


:Operates on: ``Image [OneBit]``
:Returns: ``IntVector``
:Category: Analysis
:Defined in: image_utilities.py
:Author: Michael Droettboom and Karl MacMillan


Compute the vertical projections of an image.  This computes the
number of pixels in each column.


``projection_rows``
-------------------

IntVector **projection_rows** ()


:Operates on: ``Image [OneBit]``
:Returns: ``IntVector``
:Category: Analysis
:Defined in: image_utilities.py
:Author: Michael Droettboom and Karl MacMillan


Compute the horizontal projections of an image.  This computes the
number of pixels in each row.


``projections``
---------------

Class **projections** ()


:Operates on: ``Image [OneBit]``
:Returns: ``Class``
:Category: Analysis
:Defined in: image_utilities.py
:Author: Michael Droettboom and Karl MacMillan


Computes the projections in both the *row*- and *column*- directions.
This is returned as a tuple (*rows*, *columns*), where each element is an
``IntVector`` of projections.
(Equivalent to ``(image.projections_rows(), image.projections_cols())``).

If the GUI is being used, the result is displayed in a window:

.. image:: images/projections.png




Classification
==============

``classify_automatic``
----------------------

**classify_automatic** (``String`` *id*)


:Operates on: ``Image [OneBit]``
:Category: Classification
:Defined in: plugin.py
:Author: Michael Droettboom and Karl MacMillan


Classifies the image as the value *id_name* and sets the state
to AUTOMATIC.  Use this method when an automatic classifier has classified this glyph.

*id_name*
  Can come in a two of forms:

    **string**
       image is classified using the given ``.``-delimited class name.
    **list of tuples**
       A list of tuples where each tuple is the pair (*confidence*, *class_name*).

       *confidence*
         A value in range (0, 1), where 0 is uncertain and 1 is certain.
       *class_name*
         A ``.``-delimited class name.


``classify_heuristic``
----------------------

**classify_heuristic** (``String`` *id*)


:Operates on: ``Image [OneBit]``
:Category: Classification
:Defined in: plugin.py
:Author: Michael Droettboom and Karl MacMillan


Classifies the image as the value *id_name* and sets the state
to AUTOMATIC.  Use this method when a heuristic process has classified this glyph.

*id_name*
  Can come in a two of forms:

    **string**
       image is classified using the given ``.``-delimited class name.
    **list of tuples**
       A list of tuples where each tuple is the pair (*confidence*, *class_name*).

       *confidence*
         A value in range (0, 1), where 0 is uncertain and 1 is certain.
       *class_name*
         A ``.``-delimited class name.


``classify_manual``
-------------------

**classify_manual** (``String`` *id*)


:Operates on: ``Image [OneBit]``
:Category: Classification
:Defined in: plugin.py
:Author: Michael Droettboom and Karl MacMillan


Classifies the image as the value *id_name* and sets the state
to MANUAL.  Use this method when an end user has classified this glyph.

*id_name*
  Can come in a two of forms:

    **string**
       image is classified using the given ``.``-delimited class name.
    **list of tuples**
       A list of tuples where each tuple is the pair (*confidence*, *class_name*).

       *confidence*
         A value in range (0, 1), where 0 is uncertain and 1 is certain.
       *class_name*
         A ``.``-delimited class name.


``match_id_name``
-----------------

**match_id_name** (``String`` *regex*)


:Operates on: ``Image [OneBit|GreyScale|Grey16|RGB|Float]``
:Category: Classification
:Defined in: id_name_matching.py
:Author: Michael Droettboom and Karl MacMillan



    Returns true if the image's ``id_name`` matches the given regular expression.

*regex*
    A special-purpose regular expression as defined below.

A special-purpose regular expression language designed for convenience on
Gamera symbol names is used here.  It has limited flexibility relative to Python regular
expressions, and is more akin to wildcards in command-line shells.  This
language is converted to standard Python regular expressions (``re`` module) for
efficiency.

**Informal syntax definition:**

====================  =============================================
Regular expression    Description
====================  =============================================
``A|B``               matches ``A`` or ``B``
``A.B|C``             matches ``A.B`` or ``A.C``
``*``                 multiple-character wildcard
``?``                 single character wildcard
``()``                grouping can be performed with parentheses
``[a-z]``             matches any character a-z
====================  =============================================

**Example expressions:**

========================  ====================================================  
``(upper.x)|(lower.y)``   match either ``upper.x`` or ``lower.y``
``upper.x|upper.y``       careful! matches ``upper.x.y`` or ``upper.upper.y``
``upper.*``               match anything in the ``upper`` category
``upper.a|b|c``           matches ``upper.a``, ``upper.b`` or ``upper.c``
``upper.capital_?``       ``?`` is a single character wildcard
========================  ====================================================



``unclassify``
--------------

**unclassify** ()


:Operates on: ``Image [OneBit]``
:Category: Classification
:Defined in: plugin.py
:Author: Michael Droettboom and Karl MacMillan


Sets the image back to an UNCLASSIFIED state.  Use this
when you are not longer sure of the identity of the image and you
want an automatic classifier to reclassify.



Color
=====

``blue``
--------

Image [GreyScale] **blue** ()


:Operates on: ``Image [RGB]``
:Returns: ``Image [GreyScale]``
:Category: Color
:Defined in: color.py
:Author: Michael Droettboom and Karl MacMillan


Returns a GREYSCALE image where each pixel is the blue component of the
original.


----------

**Example 1:** blue()

.. image:: images/RGB_generic.png

.. image:: images/blue_plugin_00.png



``cie_x``
---------

Image [Float] **cie_x** ()


:Operates on: ``Image [RGB]``
:Returns: ``Image [Float]``
:Category: Color
:Defined in: color.py
:Author: Michael Droettboom and Karl MacMillan


Returns a FLOAT image where each pixel is a *x* value in the `CIE 1964 Colorimetric`__ system 
in range [0, 1).

.. __: http://www.isc.tamu.edu/~astro/color/cie_xyz1964.html


----------

**Example 1:** cie_x()

.. image:: images/RGB_generic.png

.. image:: images/cie_x_plugin_00.png



``cie_y``
---------

Image [Float] **cie_y** ()


:Operates on: ``Image [RGB]``
:Returns: ``Image [Float]``
:Category: Color
:Defined in: color.py
:Author: Michael Droettboom and Karl MacMillan


Returns a FLOAT image where each pixel is a *y* value in the `CIE 1964
Colorimetric`__ system 
in range [0, 1).

.. __: http://www.isc.tamu.edu/~astro/color/cie_xyz1964.html


----------

**Example 1:** cie_y()

.. image:: images/RGB_generic.png

.. image:: images/cie_y_plugin_00.png



``cie_z``
---------

Image [Float] **cie_z** ()


:Operates on: ``Image [RGB]``
:Returns: ``Image [Float]``
:Category: Color
:Defined in: color.py
:Author: Michael Droettboom and Karl MacMillan


Returns a FLOAT image where each pixel is a *z* value in the `CIE 1964
Colorimetric`__ system 
in range [0, 1).

.. __: http://www.isc.tamu.edu/~astro/color/cie_xyz1964.html


----------

**Example 1:** cie_z()

.. image:: images/RGB_generic.png

.. image:: images/cie_z_plugin_00.png



``color_ccs``
-------------

Image [RGB] **color_ccs** ()


:Operates on: ``Image [OneBit]``
:Returns: ``Image [RGB]``
:Category: Color
:Defined in: gui_support.py
:Author: Michael Droettboom and Karl MacMillan


Returns an RGB image where each connected component of the
image is colored one of eight different colors.  This function can
be used to verify that ``cc_analysis`` is working correctly for your
image.

.. note: Connected component analysis must already be performed on the image
   (using cc_analysis_, for example) in order for this to work.

**Example 1:**

.. image:: images/color_ccs.png


``cyan``
--------

Image [GreyScale] **cyan** ()


:Operates on: ``Image [RGB]``
:Returns: ``Image [GreyScale]``
:Category: Color
:Defined in: color.py
:Author: Michael Droettboom and Karl MacMillan


Returns a GREYSCALE image where each pixel is the cyan component of the
original.


----------

**Example 1:** cyan()

.. image:: images/RGB_generic.png

.. image:: images/cyan_plugin_00.png



``false_color``
---------------

Image [RGB] **false_color** ()


:Operates on: ``Image [Float|GreyScale]``
:Returns: ``Image [RGB]``
:Category: Color
:Defined in: color.py
:Author: Michael Droettboom and Karl MacMillan


Returns a false color representation of the given image.  Low values
are red, mid values are green and high values are blue.  This can help visualize
greyscale images that are not *real* images but are representations of other
kinds of data.


----------

**Example 1:** false_color()

.. image:: images/GreyScale_generic.png

.. image:: images/false_color_plugin_00.png



``green``
---------

Image [GreyScale] **green** ()


:Operates on: ``Image [RGB]``
:Returns: ``Image [GreyScale]``
:Category: Color
:Defined in: color.py
:Author: Michael Droettboom and Karl MacMillan


Returns a GREYSCALE image where each pixel is the green component of the
original.


----------

**Example 1:** green()

.. image:: images/RGB_generic.png

.. image:: images/green_plugin_00.png



``hue``
-------

Image [Float] **hue** ()


:Operates on: ``Image [RGB]``
:Returns: ``Image [Float]``
:Category: Color
:Defined in: color.py
:Author: Michael Droettboom and Karl MacMillan


Returns a FLOAT image where each pixel is a hue value in range [0, 1).
Since the hue space is continuous, the shortest *distance* between 1 and 0 is
0.  For more information, Google HSV color space.

----------

**Example 1:** hue()

.. image:: images/RGB_generic.png

.. image:: images/hue_plugin_00.png



``magenta``
-----------

Image [GreyScale] **magenta** ()


:Operates on: ``Image [RGB]``
:Returns: ``Image [GreyScale]``
:Category: Color
:Defined in: color.py
:Author: Michael Droettboom and Karl MacMillan


Returns a GREYSCALE image where each pixel is the magenta component of the
original.


----------

**Example 1:** magenta()

.. image:: images/RGB_generic.png

.. image:: images/magenta_plugin_00.png



``red``
-------

Image [GreyScale] **red** ()


:Operates on: ``Image [RGB]``
:Returns: ``Image [GreyScale]``
:Category: Color
:Defined in: color.py
:Author: Michael Droettboom and Karl MacMillan


Returns a GREYSCALE image where each pixel is the red component of the
original.


----------

**Example 1:** red()

.. image:: images/RGB_generic.png

.. image:: images/red_plugin_00.png



``saturation``
--------------

Image [Float] **saturation** ()


:Operates on: ``Image [RGB]``
:Returns: ``Image [Float]``
:Category: Color
:Defined in: color.py
:Author: Michael Droettboom and Karl MacMillan


Returns a FLOAT image where each pixel is a saturation value
in range [0, 1).  For more information, Google for HSV color space.

----------

**Example 1:** saturation()

.. image:: images/RGB_generic.png

.. image:: images/saturation_plugin_00.png



``value``
---------

Image [Float] **value** ()


:Operates on: ``Image [RGB]``
:Returns: ``Image [Float]``
:Category: Color
:Defined in: color.py
:Author: Michael Droettboom and Karl MacMillan


Returns a FLOAT image where each pixel is a saturation value
in range [0, 1).  For more information, Google for HSV color space.

----------

**Example 1:** value()

.. image:: images/RGB_generic.png

.. image:: images/value_plugin_00.png



``yellow``
----------

Image [GreyScale] **yellow** ()


:Operates on: ``Image [RGB]``
:Returns: ``Image [GreyScale]``
:Category: Color
:Defined in: color.py
:Author: Michael Droettboom and Karl MacMillan


Returns a GREYSCALE image where each pixel is the yellow component of the
original.


----------

**Example 1:** yellow()

.. image:: images/RGB_generic.png

.. image:: images/yellow_plugin_00.png




Conversion
==========

``to_float``
------------

Image [Float] **to_float** ()


:Operates on: ``Image [OneBit|GreyScale|Grey16|RGB]``
:Returns: ``Image [Float]``
:Category: Conversion
:Defined in: image_conversion.py
:Author: Michael Droettboom and Karl MacMillan


Converts the given image to a FLOAT image.


``to_grey16``
-------------

Image [Grey16] **to_grey16** ()


:Operates on: ``Image [OneBit|GreyScale|Float|RGB]``
:Returns: ``Image [Grey16]``
:Category: Conversion
:Defined in: image_conversion.py
:Author: Michael Droettboom and Karl MacMillan


Converts the given image to a GREY16 image.


``to_greyscale``
----------------

Image [GreyScale] **to_greyscale** ()


:Operates on: ``Image [OneBit|Float|Grey16|RGB]``
:Returns: ``Image [GreyScale]``
:Category: Conversion
:Defined in: image_conversion.py
:Author: Michael Droettboom and Karl MacMillan


Converts the given image to a GREYSCALE image.

----------

**Example 1:** to_greyscale()

.. image:: images/RGB_generic.png

.. image:: images/to_greyscale_plugin_00.png



``to_onebit``
-------------

Image [OneBit] **to_onebit** ()


:Operates on: ``Image [Float|GreyScale|Grey16|RGB]``
:Returns: ``Image [OneBit]``
:Category: Conversion
:Defined in: image_conversion.py
:Author: Michael Droettboom and Karl MacMillan


Converts the given image to a ONEBIT image.  Uses the
otsu_threshold_ algorithm.  For more ways to convert to ONEBIT images,
see the Thresholding_ category.


----------

**Example 1:** to_onebit()

.. image:: images/RGB_generic.png

.. image:: images/to_onebit_plugin_00.png



``to_rgb``
----------

Image [RGB] **to_rgb** ()


:Operates on: ``Image [OneBit|GreyScale|Float|Grey16]``
:Returns: ``Image [RGB]``
:Category: Conversion
:Defined in: image_conversion.py
:Author: Michael Droettboom and Karl MacMillan


Converts the given image to an RGB image.



Deformations
============

``inkrub``
----------

Image [OneBit|GreyScale|Grey16|Float|RGB] **inkrub** (``int`` *Transcription Probability 1 in*)


:Operates on: ``Image [OneBit|GreyScale|Grey16|Float|RGB]``
:Returns: ``Image [OneBit|GreyScale|Grey16|Float|RGB]``
:Category: Deformations
:Defined in: deformation.py
:Author: Michael Droettboom and Karl MacMillan


Simulates rubbing off of ink from another page


``noise``
---------

Image [OneBit|GreyScale|Grey16|Float|RGB] **noise** (``int`` *Amplitude*, ``Choice[Horizontal|Vertical]`` *Direction*)


:Operates on: ``Image [OneBit|GreyScale|Grey16|Float|RGB]``
:Returns: ``Image [OneBit|GreyScale|Grey16|Float|RGB]``
:Category: Deformations
:Defined in: deformation.py
:Author: Michael Droettboom and Karl MacMillan


Causes random shifting of pixels within a user specified range, in a user-specified direction


``rotateShear``
---------------

Image [OneBit|GreyScale|Grey16|Float|RGB] **rotateShear** (``double`` *Rotation angle*)


:Operates on: ``Image [OneBit|GreyScale|Grey16|Float|RGB]``
:Returns: ``Image [OneBit|GreyScale|Grey16|Float|RGB]``
:Category: Deformations
:Defined in: deformation.py
:Author: Michael Droettboom and Karl MacMillan


Rotates an image by skew method


``wave``
--------

Image [OneBit|GreyScale|Grey16|Float|RGB] **wave** (``int`` *Amplitude*, ``double`` *Period*, ``Choice[Horizontal|Vertical]`` *Direction*, ``Choice[Sinusoid|Square|Sawtooth|Triangle|Sinc]`` *Waveform type*, ``int`` *Waveform Offset*)


:Operates on: ``Image [OneBit|GreyScale|Grey16|Float|RGB]``
:Returns: ``Image [OneBit|GreyScale|Grey16|Float|RGB]``
:Category: Deformations
:Defined in: deformation.py
:Author: Michael Droettboom and Karl MacMillan


Causes periodic disturbance of user-defined frequency, amplitude, and direction



Displaying
==========

``display``
-----------

**display** ()


:Operates on: ``Image [OneBit|GreyScale|Grey16|RGB|Float]``
:Category: Displaying
:Defined in: plugin.py
:Author: Michael Droettboom and Karl MacMillan


Displays the image in its own window.  (See `Using the Gamera GUI`__).

.. __: gui.html

.. image:: images/display.png


``display_ccs``
---------------

**display_ccs** ()


:Operates on: ``Image [OneBit]``
:Category: Displaying
:Defined in: plugin.py
:Author: Michael Droettboom and Karl MacMillan


Displays the image in its own window.  (See `Using the Gamera GUI`__).
Each connected component
is assigned to one of eight colors.  This display can be used to see how
connected component analysis performs on a given image.  Uses color_ccs_ under
the hood.

.. note: Connected component analysis must already be performed on the image
   (using cc_analysis_, for example) in order for this to work.

.. __: gui.html

.. image:: images/display_ccs.png


``display_false_color``
-----------------------

**display_false_color** ()


:Operates on: ``Image [GreyScale|Float]``
:Category: Displaying
:Defined in: plugin.py
:Author: Michael Droettboom and Karl MacMillan


Displays the image using false coloring.  (See false_color_).

.. image:: images/display_false_color.png



Draw
====

``draw_filled_rect``
--------------------

**draw_filled_rect** (``int`` *x1*, ``int`` *y1*, ``int`` *x2*, ``int`` *y2*, ``double`` *value*)


:Operates on: ``Image [OneBit]``
:Category: Draw
:Defined in: draw.py
:Author: Michael Droettboom and Karl MacMillan


Draws a filled rectangle.

*x1*:
  Starting *x* coordinate.
*y1*:
  Starting *y* coordinate.
*x2*:
  Ending *x* coordinate.
*y2*:
  Ending *y* coordinate.
*value*:
  The pixel value to set for the rectangle.

.. note:: This needs to be extended to support more pixel types.

----------

**Example 1:** draw_filled_rect(5, 5, 20, 25, 1)

.. image:: images/OneBit_generic.png

.. image:: images/draw_filled_rect_plugin_00.png



``draw_hollow_rect``
--------------------

**draw_hollow_rect** (``int`` *x1*, ``int`` *y1*, ``int`` *x2*, ``int`` *y2*, ``double`` *value*)


:Operates on: ``Image [OneBit]``
:Category: Draw
:Defined in: draw.py
:Author: Michael Droettboom and Karl MacMillan


Draws a hollow rectangle.

*x1*:
  Starting *x* coordinate.
*y1*:
  Starting *y* coordinate.
*x2*:
  Ending *x* coordinate.
*y2*:
  Ending *y* coordinate.
*value*:
  The pixel value to set for the lines.

.. note:: This needs to be extended to support more pixel types.

----------

**Example 1:** draw_hollow_rect(5, 5, 20, 25, 1)

.. image:: images/OneBit_generic.png

.. image:: images/draw_hollow_rect_plugin_00.png



``draw_line``
-------------

**draw_line** (``int`` *x1*, ``int`` *y1*, ``int`` *x2*, ``int`` *y2*, ``double`` *value*)


:Operates on: ``Image [OneBit]``
:Category: Draw
:Defined in: draw.py
:Author: Michael Droettboom and Karl MacMillan


Draws a straight line between two points.

*x1*:
  Starting *x* coordinate.
*y1*:
  Starting *y* coordinate.
*x2*:
  Ending *x* coordinate.
*y2*:
  Ending *y* coordinate.
*value*:
  The pixel value to set for the line.

.. note:: This needs to be extended to support more pixel types.

----------

**Example 1:** draw_line(5, 5, 20, 25, 1)

.. image:: images/OneBit_generic.png

.. image:: images/draw_line_plugin_00.png



``fill_white``
--------------

**fill_white** ()


:Operates on: ``Image [OneBit|GreyScale|Grey16|Float|RGB]``
:Category: Draw
:Defined in: image_utilities.py
:Author: Michael Droettboom and Karl MacMillan


Fills the entire image with white.


``invert``
----------

**invert** ()


:Operates on: ``Image [OneBit|GreyScale|Grey16|RGB]``
:Category: Draw
:Defined in: image_utilities.py
:Author: Michael Droettboom and Karl MacMillan


Inverts the image.

----------

**Example 1:** invert()

.. image:: images/RGB_generic.png

.. image:: images/invert_plugin_00.png

**Example 2:** invert()

.. image:: images/GreyScale_generic.png

.. image:: images/invert_plugin_01.png

**Example 3:** invert()

.. image:: images/OneBit_generic.png

.. image:: images/invert_plugin_02.png




Features
========

``area``
--------

FloatVector **area** ()


:Operates on: ``Image [OneBit]``
:Returns: ``FloatVector``
:Category: Features
:Defined in: features.py
:Author: Michael Droettboom and Karl MacMillan


The area of the bounding box (i.e. *nrows* * *ncols*).

.. warning: this feature is not scale invariant.
    

----------

**Example 1:** area()

.. image:: images/OneBit_generic.png

*result* = array('d', [7000.0])



``aspect_ratio``
----------------

FloatVector **aspect_ratio** ()


:Operates on: ``Image [OneBit]``
:Returns: ``FloatVector``
:Category: Features
:Defined in: features.py
:Author: Michael Droettboom and Karl MacMillan


The aspect ratio of the bounding box (i.e. *ncols* / *nrows*).

This feature is scale invariant.
    

----------

**Example 1:** aspect_ratio()

.. image:: images/OneBit_generic.png

*result* = array('d', [0.69999999999999996])



``black_area``
--------------

FloatVector **black_area** ()


:Operates on: ``Image [OneBit]``
:Returns: ``FloatVector``
:Category: Features
:Defined in: features.py
:Author: Michael Droettboom and Karl MacMillan


The simplest of all feature-generating functions, ``black_area`` simply
returns the number of black pixels.

.. warning: This feature is not scale invariant.

----------

**Example 1:** black_area()

.. image:: images/OneBit_generic.png

*result* = array('d', [1518.0])



``compactness``
---------------

FloatVector **compactness** ()


:Operates on: ``Image [OneBit]``
:Returns: ``FloatVector``
:Category: Features
:Defined in: features.py
:Author: Michael Droettboom and Karl MacMillan


Loosely speaking, compactness is a volume to surface area ratio
of the connected components.  Highly ornate connected components have
a low compactness, whereas a perfect circle has very high compactness.

The result is derived by calling outline_ on the image and then
comparing the number of pixels in the outline to the original.

Since this function requires allocation and deallocation of memory, it
is relatively slow.  However, it has proven to be a very useful feature
in many cases.

This feature is relatively scale and rotation invariant, though as the
image scales, the pixel size relative to the image size diminishes.  This
is currently not corrected for.


----------

**Example 1:** compactness()

.. image:: images/OneBit_generic.png

*result* = array('d', [0.50592885375494068])



``moments``
-----------

FloatVector **moments** ()


:Operates on: ``Image [OneBit]``
:Returns: ``FloatVector``
:Category: Features
:Defined in: features.py
:Author: Michael Droettboom and Karl MacMillan


Returns *moments* of the image.

The elements of the returned ``FloatVector`` are:

0. center of gravity on *x* axis
1. center of gravity on *y* axis
2. second order moment on *x* axis
3. second order moment on *y* axis
4. first order moment on both axes

The rest of these I'm not so sure about anymore.  I'll document this soon...

These features are scale invariant.


----------

**Example 1:** moments()

.. image:: images/OneBit_generic.png

*result* = array('d', [0.10721836734693878, 0.11714714285714285, 0.038409057233236149, 0.09039186294752187, 0.039458327664723035, 0.016029672484755123, 0.019246628947512095, 0.010444870016473779, 0.064997712724557205])



``nholes``
----------

FloatVector **nholes** ()


:Operates on: ``Image [OneBit]``
:Returns: ``FloatVector``
:Category: Features
:Defined in: features.py
:Author: Michael Droettboom and Karl MacMillan


Returns the average number of transitions from white to black in each
row or column.

The elements of the returned ``FloatVector`` are:

0. vertical
1. horizontal

These features are scale invariant.


----------

**Example 1:** nholes()

.. image:: images/OneBit_generic.png

*result* = array('d', [1.8857142857142857, 0.92000000000000004])



``nholes_extended``
-------------------

FloatVector **nholes_extended** ()


:Operates on: ``Image [OneBit]``
:Returns: ``FloatVector``
:Category: Features
:Defined in: features.py
:Author: Michael Droettboom and Karl MacMillan


Divides the image into four quadrants and then does a
nholes_ analysis on each of those quadrants.

The elements of the returned ``FloatVector`` are:

0 - 3
  vertical ``nholes`` for each of the quadrants in order NW, NE, SW, SE.
4 - 7
  horizonal ``nholes`` for each of the quadrants in order NW, NE, SW, SE.

These features are scale invariant.


----------

**Example 1:** nholes_extended()

.. image:: images/OneBit_generic.png

*result* = array('d', [3.0, 44.0, 48.0, 33.0, 0.0, 40.0, 38.0, 14.0])



``skeleton_features``
---------------------

FloatVector **skeleton_features** ()


:Operates on: ``Image [OneBit]``
:Returns: ``FloatVector``
:Category: Features
:Defined in: features.py
:Author: Michael Droettboom and Karl MacMillan


Generates a number of features based on the skeleton of an image.
First, the image in skeletonized using the Lee and Chen algorithm, which
guarantees that the pixels of the resulting skeleton are never more than
4-connected.  Then, this skeleton is analysed for a number of properties:

0. Number of X joints (4-connected pixels)
1. Number of T joints (3-connected pixels)
2. Average bumber of bend points (pixels which do not form a horizontal or
   vertical line with its neighbors)
3. Number of end points (1-connected pixels)
4. Number of *x*-axis crossings
5. Number of *y*-axis crossings



``top_bottom``
--------------

FloatVector **top_bottom** ()


:Operates on: ``Image [OneBit]``
:Returns: ``FloatVector``
:Category: Features
:Defined in: features.py
:Author: Michael Droettboom and Karl MacMillan


Features useful only for segmentation-free analysis.  Currently, the
first feature is the first row containing a black pixel, and the second feature
is the last row containing a black pixel.

----------

**Example 1:** top_bottom()

.. image:: images/OneBit_generic.png

*result* = array('d', [0.0, 0.98999999999999999])



``volume``
----------

FloatVector **volume** ()


:Operates on: ``Image [OneBit]``
:Returns: ``FloatVector``
:Category: Features
:Defined in: features.py
:Author: Michael Droettboom and Karl MacMillan


The percentage of black pixels within the rectangular bounding
box of the image.  Result in range (0, 1].

This feature is scale and rotation invariant.


----------

**Example 1:** volume()

.. image:: images/OneBit_generic.png

*result* = array('d', [0.21685714285714286])



``volume16regions``
-------------------

FloatVector **volume16regions** ()


:Operates on: ``Image [OneBit]``
:Returns: ``FloatVector``
:Category: Features
:Defined in: features.py
:Author: Michael Droettboom and Karl MacMillan


Divides the image into a 4 x 4 grid of 16 regions and calculates
the volume within each.

----------

**Example 1:** volume16regions()

.. image:: images/OneBit_generic.png

*result* = array('d', [0.0, 0.17555555555555555, 0.53111111111111109, 0.10666666666666667, 0.0, 0.21777777777777776, 0.037777777777777778, 0.44888888888888889, 0.080000000000000002, 0.42444444444444446, 0.46000000000000002, 0.34000000000000002, 0.33555555555555555, 0.21777777777777776, 0.035555555555555556, 0.093333333333333338])



``volume64regions``
-------------------

FloatVector **volume64regions** ()


:Operates on: ``Image [OneBit]``
:Returns: ``FloatVector``
:Category: Features
:Defined in: features.py
:Author: Michael Droettboom and Karl MacMillan


Divides the image into a 8 x 8 grid of 64 regions and calculates
the volume within each.

----------

**Example 1:** volume64regions()

.. image:: images/OneBit_generic.png

*result* = array('d', [0.0, 0.0, 0.0, 0.034188034188034191, 0.3247863247863248, 0.18803418803418803, 0.076923076923076927, 0.0, 0.0, 0.0, 0.0085470085470085479, 0.65811965811965811, 0.80341880341880345, 0.94871794871794868, 0.25641025641025639, 0.0, 0.0, 0.0, 0.29059829059829062, 0.19658119658119658, 0.0, 0.14529914529914531, 0.69230769230769229, 0.15384615384615385, 0.0, 0.0, 0.14529914529914531, 0.22222222222222221, 0.0, 0.0, 0.68376068376068377, 0.23931623931623933, 0.059829059829059832, 0.0, 0.15384615384615385, 0.89743589743589747, 0.88034188034188032, 0.81196581196581197, 0.51282051282051277, 0.28205128205128205, 0.24786324786324787, 0.0, 0.5213675213675214, 0.13675213675213677, 0.1111111111111111, 0.042735042735042736, 0.39316239316239315, 0.18803418803418803, 0.37606837606837606, 0.0, 0.41025641025641024, 0.076923076923076927, 0.1111111111111111, 0.034188034188034191, 0.19658119658119658, 0.1623931623931624, 0.40170940170940173, 0.5641025641025641, 0.3504273504273504, 0.0, 0.0, 0.0, 0.0, 0.0])



``zernike_moments``
-------------------

FloatVector **zernike_moments** ()


:Operates on: ``Image [OneBit]``
:Returns: ``FloatVector``
:Category: Features
:Defined in: features.py
:Author: Michael Droettboom and Karl MacMillan


I can't say I understand much about Zernike moments, except that
they are well known for all kinds of invariance, and are often detailed
enough to reconstruct many shapes in a reasonable way.

A. Khotanzad and Y. Hong. Invariant image recognition by Zernike moments.
*IEEE Transactions on Pattern Analysis and Machine Intelligence*, 12(5), 1990.


----------

**Example 1:** zernike_moments()

.. image:: images/OneBit_generic.png

*result* = array('d', [-37.223158090332504, -115.27274218259787, -27.38888482889574, -238.55414747433861, 99.091297417022759, 68.584177440635628, 329.80317022580272, 50.381730229673231, 8.6592661085182421, 58.04265047527376, 315.72095729103381, 301.84194567130726, -69.978045223611701, -62.235854155025173, 60.605978333980012, 15.471584853132827, 76.095993290903195, 22.29836927622107, 370.0254790802569, 228.42192663806134, -36.488449055134488, 78.96739358965047, 278.86617421574044, 978.55979874564093, -0.16938552125805673, -1.3852848954126054])




File
====

``PNG_info``
------------

ImageInfo **PNG_info** (``String`` *image_file_name*)


:Returns: ``ImageInfo``
:Category: File
:Defined in: png_support.py
:Author: Michael Droettboom


Returns an ``ImageInfo`` object describing a PNG file.

    *image_file_name*
      A PNG image filename


``load_PNG``
------------

Image [OneBit|GreyScale|Grey16|RGB|Float] **load_PNG** (``FileOpen`` *image_file_name*, ``Choice[DENSE|RLE]`` *storage format*)


:Returns: ``Image [OneBit|GreyScale|Grey16|RGB|Float]``
:Category: File
:Defined in: png_support.py
:Author: Michael Droettboom


Loads a PNG format image file.


``load_image``
--------------

Image [OneBit|GreyScale|Grey16|RGB|Float] **load_image** (``FileOpen`` *filename*)


:Operates on: ``Image [OneBit|GreyScale|Grey16|RGB|Float]``
:Returns: ``Image [OneBit|GreyScale|Grey16|RGB|Float]``
:Category: File
:Defined in: plugin.py
:Author: Michael Droettboom and Karl MacMillan


Loads an image from disk.  Currently only TIFF and PNG images are supported.


``load_tiff``
-------------

Image [OneBit|GreyScale|Grey16|RGB|Float] **load_tiff** (``FileOpen`` *image_file_name*, ``Choice[DENSE|RLE]`` *storage format*)


:Returns: ``Image [OneBit|GreyScale|Grey16|RGB|Float]``
:Category: File
:Defined in: tiff_support.py
:Author: Michael Droettboom and Karl MacMillan


Loads a TIFF file from disk.

*image_file_name*
  A TIFF image filename

*storage_format* (optional)
  specifies the compression type for the result:

  DENSE (0)
    no compression
  RLE (1)
    run-length encoding compression


``save_PNG``
------------

**save_PNG** (``FileSave`` *image_file_name*)


:Operates on: ``Image [OneBit|GreyScale|Grey16|RGB|Float]``
:Category: File
:Defined in: png_support.py
:Author: Michael Droettboom


Saves the image to a PNG format file.


``save_tiff``
-------------

**save_tiff** (``FileSave`` *image_file_name*)


:Operates on: ``Image [OneBit|GreyScale|Grey16|RGB]``
:Category: File
:Defined in: tiff_support.py
:Author: Michael Droettboom and Karl MacMillan


Saves an image to disk in TIFF format.

*image_file_name*
  A TIFF image filename
    


``tiff_info``
-------------

ImageInfo **tiff_info** (``String`` *image_file_name*)


:Returns: ``ImageInfo``
:Category: File
:Defined in: tiff_support.py
:Author: Michael Droettboom and Karl MacMillan


Returns an ``ImageInfo`` object describing a TIFF file.

*image_file_name*
  A TIFF image filename



Filter
======


Smoothing
---------

``gaussian_smoothing``
``````````````````````

Image [OneBit|GreyScale|Grey16|Float|RGB] **gaussian_smoothing** (``int`` *scale*)


:Operates on: ``Image [OneBit|GreyScale|Grey16|Float|RGB]``
:Returns: ``Image [OneBit|GreyScale|Grey16|Float|RGB]``
:Category: Filter/Smoothing
:Defined in: guassian_smoothing.py
:Author: Michael Droettboom and Karl MacMillan


Returns the Gaussian smoothing operation on the image.

*scale*
  The size of the Gaussian smoothing operator in pixels.

This function was imported from VIGRA_.

.. _VIGRA: http://kogs-www.informatik.uni-hamburg.de/~koethe/vigra/

----------

**Example 1:** gaussian_smoothing(5,)

.. image:: images/RGB_generic.png

.. image:: images/gaussian_smoothing_plugin_00.png

**Example 2:** gaussian_smoothing(5,)

.. image:: images/GreyScale_generic.png

.. image:: images/gaussian_smoothing_plugin_01.png

**Example 3:** gaussian_smoothing(5,)

.. image:: images/OneBit_generic.png

.. image:: images/gaussian_smoothing_plugin_02.png




Thinning
--------

``thin_hs``
```````````

Image [OneBit] **thin_hs** ()


:Operates on: ``Image [OneBit]``
:Returns: ``Image [OneBit]``
:Category: Filter/Thinning
:Defined in: thinning.py
:Author: Michael Droettboom and Karl MacMillan (based on code by Øivind Due Trier and Qian Huang)


Thins (skeletonizes) a ONEBIT image using the Haralick and Shapiro algorithm

This algorithm has the interesting property that all pixels are never more than
4-connected.

R. M. Haralick and L. G. Shapiro. 1992.
*Computer and Robot Vision*,
Vol. 1, Chapter 5 (especially 5.10.1).
Reading, MA: Addison-Wesley.


----------

**Example 1:** thin_hs()

.. image:: images/OneBit_generic.png

.. image:: images/thin_hs_plugin_00.png



``thin_lc``
```````````

Image [OneBit] **thin_lc** ()


:Operates on: ``Image [OneBit]``
:Returns: ``Image [OneBit]``
:Category: Filter/Thinning
:Defined in: thinning.py
:Author: Michael Droettboom and Karl MacMillan (based on code by Øivind Due Trier and Qian Huang)


Thins (skeletonizes) a ONEBIT image using the Lee and Chen algorithm.

H.-J. Lee and B. Chen. 1992.
Recognition of handwritten chinese characters via short
line segments. *Pattern Recognition*. 25(5) 543-552.


----------

**Example 1:** thin_lc()

.. image:: images/OneBit_generic.png

.. image:: images/thin_lc_plugin_00.png



``thin_zs``
```````````

Image [OneBit] **thin_zs** ()


:Operates on: ``Image [OneBit]``
:Returns: ``Image [OneBit]``
:Category: Filter/Thinning
:Defined in: thinning.py
:Author: Michael Droettboom and Karl MacMillan (based on code by Øivind Due Trier and Qian Huang)


Thins (skeletonizes) a ONEBIT image using the Zhang and Suen algorithm

T. Y. Zhang and C. Y. Suen. 1984.
A Fast Parallel Algorithm for Thinning Digital Patterns.,
*Communications of ACM*, 2(3).
  
R. C. Gonzalez and P. Wintz. 1987
*Digital Image Processing.*,
2. edition. 398-402. 


----------

**Example 1:** thin_zs()

.. image:: images/OneBit_generic.png

.. image:: images/thin_zs_plugin_00.png



``outline``
-----------

Image [OneBit] **outline** ()


:Operates on: ``Image [OneBit]``
:Returns: ``Image [OneBit]``
:Category: Filter
:Defined in: misc_filters.py
:Author: Michael Droettboom and Karl MacMillan


Traces the outline of the image.  This result is obtained by
dilating the image and then XOR'ing the result with the original.

----------

**Example 1:** outline()

.. image:: images/OneBit_generic.png

.. image:: images/outline_plugin_00.png




List
====

``permute_list``
----------------

int **permute_list** (``Class`` *list*)


:Returns: ``int``
:Category: List
:Defined in: listutilities.py
:Author: Michael Droettboom and Karl MacMillan


Permutes the given list (in place) one step.

Returns ``True`` if there are more permutations to go.  Returns ``False`` if
permutations are done.

Example usage::

   >>>from gamera.plugins import listutilities
   >>>a = [1,2,3]
   >>>while listutilities.permute_list(a):
   ...    print a
   ...
   [2, 1, 3]
   [1, 3, 2]
   [3, 1, 2]
   [2, 3, 1]
   [3, 2, 1]




Morphology
==========

``dilate``
----------

**dilate** ()


:Operates on: ``Image [OneBit|GreyScale|Float]``
:Category: Morphology
:Defined in: morphology.py
:Author: Michael Droettboom and Karl MacMillan


Dilates the image by the image morphology method.

----------

**Example 1:** dilate()

.. image:: images/GreyScale_generic.png

.. image:: images/dilate_plugin_00.png

**Example 2:** dilate()

.. image:: images/OneBit_generic.png

.. image:: images/dilate_plugin_01.png



``erode``
---------

**erode** ()


:Operates on: ``Image [OneBit|GreyScale|Float]``
:Category: Morphology
:Defined in: morphology.py
:Author: Michael Droettboom and Karl MacMillan


Erodes the image by the image morphology method.

----------

**Example 1:** erode()

.. image:: images/GreyScale_generic.png

.. image:: images/erode_plugin_00.png

**Example 2:** erode()

.. image:: images/OneBit_generic.png

.. image:: images/erode_plugin_01.png



``erode_dilate``
----------------

**erode_dilate** (``int(0, 10)`` *ntimes*, ``Choice[dilate|erode]`` *direction*, ``Choice[rectangular|octagonal]`` *shape*)


:Operates on: ``Image [OneBit|GreyScale|Float]``
:Category: Morphology
:Defined in: morphology.py
:Author: Michael Droettboom and Karl MacMillan


Erodes or dilates the image by the image morphology method.

*ntimes*
  The number of times to perform the operation.
*direction*
  dilate (0)
    increase the presence of black
  erode (1)
    decrease the presence of black
*shape*
  rectangular (0)
    use a 3x3 rectangular morphology operator
  octagonal (1)
    use a 3x3 octagonal morphology operator


----------

**Example 1:** erode_dilate(10, 0, 1)

.. image:: images/GreyScale_generic.png

.. image:: images/erode_dilate_plugin_00.png



``mean``
--------

**mean** ()


:Operates on: ``Image [GreyScale|Float]``
:Category: Morphology
:Defined in: morphology.py
:Author: Michael Droettboom and Karl MacMillan


Within each 3x3 window, set the center pixel to the mean value of
all 9 pixels.

----------

**Example 1:** mean()

.. image:: images/GreyScale_generic.png

.. image:: images/mean_plugin_00.png



``rank``
--------

**rank** (``int(1, 9)`` *rank*)


:Operates on: ``Image [OneBit|GreyScale|Float]``
:Category: Morphology
:Defined in: morphology.py
:Author: Michael Droettboom and Karl MacMillan


Within each 3x3 window, set the center pixel to the *n*-th ranked
value.

*rank* (1 - 9)
  The rank of the 9 pixels to select for the center.  5 is equivalent to
  the median.

----------

**Example 1:** rank(2,)

.. image:: images/GreyScale_generic.png

.. image:: images/rank_plugin_00.png

**Example 2:** rank(5,)

.. image:: images/GreyScale_generic.png

.. image:: images/rank_plugin_01.png

**Example 3:** rank(8,)

.. image:: images/GreyScale_generic.png

.. image:: images/rank_plugin_02.png




Relational
==========

``polar_distance``
------------------

FloatVector **polar_distance** (``Image [OneBit|GreyScale|Grey16|RGB|Float]`` *other*)


:Operates on: ``Image [OneBit|GreyScale|Grey16|RGB|Float]``
:Returns: ``FloatVector``
:Category: Relational
:Defined in: structural.py
:Author: Michael Droettboom and Karl MacMillan


Returns a tuple containing the normalized distance, polar direction,
    and non-normalized polar distance to another glyph (based on center of bounding boxes).


``polar_match``
---------------

int **polar_match** (``double`` *r1*, ``double`` *q1*, ``double`` *r2*, ``double`` *q2*)


:Returns: ``int``
:Category: Relational
:Defined in: structural.py
:Author: Michael Droettboom and Karl MacMillan

.. warning:: No documentation written.




Runlength
=========

``filter_narrow_runs``
----------------------

**filter_narrow_runs** (``int`` *size*)


:Operates on: ``Image [OneBit]``
:Category: Runlength
:Defined in: runlength.py
:Author: Michael Droettboom and Karl MacMillan


Removes black horizontal runs narrower than a given length.

----------

**Example 1:** filter_narrow_runs(5,)

.. image:: images/OneBit_generic.png

.. image:: images/filter_narrow_runs_plugin_00.png



``filter_short_runs``
---------------------

**filter_short_runs** (``int`` *size*)


:Operates on: ``Image [OneBit]``
:Category: Runlength
:Defined in: runlength.py
:Author: Michael Droettboom and Karl MacMillan


Removes black vertical runs shorter than a given length.

----------

**Example 1:** filter_short_runs(5,)

.. image:: images/OneBit_generic.png

.. image:: images/filter_short_runs_plugin_00.png



``filter_tall_runs``
--------------------

**filter_tall_runs** (``int`` *size*)


:Operates on: ``Image [OneBit]``
:Category: Runlength
:Defined in: runlength.py
:Author: Michael Droettboom and Karl MacMillan


Removes black vertical runs taller than a given length.

----------

**Example 1:** filter_tall_runs(10,)

.. image:: images/OneBit_generic.png

.. image:: images/filter_tall_runs_plugin_00.png



``filter_wide_runs``
--------------------

**filter_wide_runs** (``int`` *size*)


:Operates on: ``Image [OneBit]``
:Category: Runlength
:Defined in: runlength.py
:Author: Michael Droettboom and Karl MacMillan


Removes black horizontal runs wider than a given length.

----------

**Example 1:** filter_wide_runs(10,)

.. image:: images/OneBit_generic.png

.. image:: images/filter_wide_runs_plugin_00.png



``from_rle``
------------

**from_rle** (``String`` *runs*)


:Operates on: ``Image [OneBit]``
:Category: Runlength
:Defined in: runlength.py
:Author: Michael Droettboom and Karl MacMillan


Decodes a string-based run-length encoded version of the image.

The numbers alternate between "length of black run" and "length of white run".
Runs go left-to-right, top-to-bottom.
Runs rollover the right hand edge and continue on the left edge of the next run.

To encode an RLE string, use to_rle_.


``most_frequent_black_horizontal_run``
--------------------------------------

int **most_frequent_black_horizontal_run** ()


:Operates on: ``Image [OneBit]``
:Returns: ``int``
:Category: Runlength
:Defined in: runlength.py
:Author: Michael Droettboom and Karl MacMillan


Returns the length of the most frequently occurring horizontal run of
black pixels.

----------

**Example 1:** most_frequent_black_horizontal_run()

.. image:: images/OneBit_generic.png

*result* = 9



``most_frequent_black_vertical_run``
------------------------------------

int **most_frequent_black_vertical_run** ()


:Operates on: ``Image [OneBit]``
:Returns: ``int``
:Category: Runlength
:Defined in: runlength.py
:Author: Michael Droettboom and Karl MacMillan


Returns the length of the most frequently occurring vertical run of
black pixels.

----------

**Example 1:** most_frequent_black_vertical_run()

.. image:: images/OneBit_generic.png

*result* = 3



``most_frequent_white_horizontal_run``
--------------------------------------

int **most_frequent_white_horizontal_run** ()


:Operates on: ``Image [OneBit]``
:Returns: ``int``
:Category: Runlength
:Defined in: runlength.py
:Author: Michael Droettboom and Karl MacMillan


Returns the length of the most frequently occurring horizontal run of
white pixels.

----------

**Example 1:** most_frequent_white_horizontal_run()

.. image:: images/OneBit_generic.png

*result* = 9



``most_frequent_white_vertical_run``
------------------------------------

int **most_frequent_white_vertical_run** ()


:Operates on: ``Image [OneBit]``
:Returns: ``int``
:Category: Runlength
:Defined in: runlength.py
:Author: Michael Droettboom and Karl MacMillan


Returns the length of the most frequently occurring vertical run of
white pixels.

----------

**Example 1:** most_frequent_white_vertical_run()

.. image:: images/OneBit_generic.png

*result* = 1



``to_rle``
----------

String **to_rle** ()


:Operates on: ``Image [OneBit]``
:Returns: ``String``
:Category: Runlength
:Defined in: runlength.py
:Author: Michael Droettboom and Karl MacMillan


Encodes a string-based run-length encoded version of the image.

The numbers alternate between "length of black run" and "length of white run".
Runs go left-to-right, top-to-bottom.
Runs rollover the right hand edge and continue on the left edge of the next run.

To decode an RLE string, use from_rle_.

----------

**Example 1:** to_rle()

.. image:: images/OneBit_generic.png

*result* = '42 12 56 17 53 19 61 10 63 9 63 8 64 7 64 7 64 7 64 7 64 7 63 7 64 6 64 7 64 6 65 6 64 6 63 7 63 7 65 5 65 4 66 5 65 5 65 5 64 5 65 5 53 2 10 4 52 4 9 4 52 4 9 5 51 4 9 5 30 5 15 7 7 5 28 8 14 9 5 6 27 7 14 12 2 6 26 8 14 19 28 7 14 5 2 13 28 7 14 6 2 11 29 7 13 8 2 9 30 7 13 9 5 4 31 8 12 10 39 8 11 12 39 7 11 13 38 7 10 5 1 9 10 1 26 7 10 4 3 9 10 2 24 8 8 5 4 9 9 3 24 7 8 4 6 9 10 1 24 8 8 3 7 9 35 7 20 8 34 8 20 8 34 8 19 9 33 9 19 9 33 8 20 9 33 8 20 9 33 8 21 8 32 9 20 9 32 9 20 9 10 1 19 11 20 9 9 2 20 10 20 9 9 2 21 9 20 9 9 2 21 9 20 9 9 2 21 9 20 9 9 2 21 10 19 9 9 1 22 10 19 9 9 1 22 10 19 9 9 1 22 11 18 9 9 1 23 10 18 9 9 1 23 10 18 9 33 10 18 8 34 11 17 8 35 11 16 8 35 11 16 8 35 11 16 8 36 11 15 7 37 11 15 5 33 2 5 11 14 3 33 3 6 12 12 3 33 3 8 11 10 4 17 1 16 2 10 12 6 5 17 5 13 1 11 13 4 4 18 5 27 14 1 4 18 6 29 15 17 8 31 16 10 11 34 35 36 33 39 29 43 25 47 21 52 15 62 4 329 4 36 2 30 4 31 5 32 6 25 5 35 6 21 7 39 11 6 11 46 21 52 14 66 1 27 0 '




Segmentation
============

``cc_analysis``
---------------

ImageList **cc_analysis** ()


:Operates on: ``Image [OneBit]``
:Returns: ``ImageList``
:Category: Segmentation
:Defined in: segmentation.py
:Author: Michael Droettboom and Karl MacMillan


Performs connected component analysis on the image.

This algorithm assumes 8-connected components, meaning any two pixels are
considered "connected" if they are adjacent in any direction, including
diagonally.

The original image will have all of it's pixels "labeled" with a number
representing each connected component.  This is so the connected components
can share data with their source image and makes things much more efficient.

Returns a list of ccs found in the image.  Since all the CC's share the same
data with the original image, changing the CC's will affect the original.  If
you do not want this behavior, use the image_copy_ function on each of the CCs::

   ccs = [x.image_copy() for x in ccs]



----------

**Example 1:** cc_analysis()

.. image:: images/OneBit_generic.png

|cc_analysis_plugin_00_00| |cc_analysis_plugin_00_01| |cc_analysis_plugin_00_02| |cc_analysis_plugin_00_03| |cc_analysis_plugin_00_04| 

.. |cc_analysis_plugin_00_00| image:: images/cc_analysis_plugin_00_00.png
.. |cc_analysis_plugin_00_01| image:: images/cc_analysis_plugin_00_01.png
.. |cc_analysis_plugin_00_02| image:: images/cc_analysis_plugin_00_02.png
.. |cc_analysis_plugin_00_03| image:: images/cc_analysis_plugin_00_03.png
.. |cc_analysis_plugin_00_04| image:: images/cc_analysis_plugin_00_04.png


``cc_and_cluster``
------------------

ImageList **cc_and_cluster** (``double`` *ratio*, ``int`` *distance*)


:Operates on: ``Image [OneBit]``
:Returns: ``ImageList``
:Category: Segmentation
:Defined in: segmentation.py
:Author: Michael Droettboom and Karl MacMillan


Performs connected component analysis using cc_analysis_ and then
clusters the CC's according to their similarity.

TODO: We need some more detailed documentation here.


``splitx``
----------

ImageList **splitx** (``double`` *center*)


:Operates on: ``Image [OneBit]``
:Returns: ``ImageList``
:Category: Segmentation
:Defined in: segmentation.py
:Author: Michael Droettboom and Karl MacMillan


Splits an image vertically.

The split point is determined automatically
by finding a valley in the projections near the center of the image.

----------

**Example 1:** splitx()

.. image:: images/OneBit_generic.png

|splitx_plugin_00_00| |splitx_plugin_00_01| |splitx_plugin_00_02| |splitx_plugin_00_03| |splitx_plugin_00_04| |splitx_plugin_00_05| |splitx_plugin_00_06| |splitx_plugin_00_07| |splitx_plugin_00_08| 

.. |splitx_plugin_00_00| image:: images/splitx_plugin_00_00.png
.. |splitx_plugin_00_01| image:: images/splitx_plugin_00_01.png
.. |splitx_plugin_00_02| image:: images/splitx_plugin_00_02.png
.. |splitx_plugin_00_03| image:: images/splitx_plugin_00_03.png
.. |splitx_plugin_00_04| image:: images/splitx_plugin_00_04.png
.. |splitx_plugin_00_05| image:: images/splitx_plugin_00_05.png
.. |splitx_plugin_00_06| image:: images/splitx_plugin_00_06.png
.. |splitx_plugin_00_07| image:: images/splitx_plugin_00_07.png
.. |splitx_plugin_00_08| image:: images/splitx_plugin_00_08.png


``splitx_left``
---------------

ImageList **splitx_left** ()


:Operates on: ``Image [OneBit]``
:Returns: ``ImageList``
:Category: Segmentation
:Defined in: segmentation.py
:Author: Michael Droettboom and Karl MacMillan


Splits an image vertically.

The split point is determined automatically
by finding a valley in the projections near the left of the image.

----------

**Example 1:** splitx_left()

.. image:: images/OneBit_generic.png

|splitx_left_plugin_00_00| |splitx_left_plugin_00_01| |splitx_left_plugin_00_02| |splitx_left_plugin_00_03| |splitx_left_plugin_00_04| |splitx_left_plugin_00_05| |splitx_left_plugin_00_06| |splitx_left_plugin_00_07| 

.. |splitx_left_plugin_00_00| image:: images/splitx_left_plugin_00_00.png
.. |splitx_left_plugin_00_01| image:: images/splitx_left_plugin_00_01.png
.. |splitx_left_plugin_00_02| image:: images/splitx_left_plugin_00_02.png
.. |splitx_left_plugin_00_03| image:: images/splitx_left_plugin_00_03.png
.. |splitx_left_plugin_00_04| image:: images/splitx_left_plugin_00_04.png
.. |splitx_left_plugin_00_05| image:: images/splitx_left_plugin_00_05.png
.. |splitx_left_plugin_00_06| image:: images/splitx_left_plugin_00_06.png
.. |splitx_left_plugin_00_07| image:: images/splitx_left_plugin_00_07.png


``splitx_max``
--------------

ImageList **splitx_max** (``double`` *center*)


:Operates on: ``Image [OneBit]``
:Returns: ``ImageList``
:Category: Segmentation
:Defined in: segmentation.py
:Author: Michael Droettboom and Karl MacMillan


Splits an image vertically.

The split point is determined automatically
by finding a peak in the projections near the center of the image.

----------

**Example 1:** splitx_max()

.. image:: images/OneBit_generic.png

|splitx_max_plugin_00_00| |splitx_max_plugin_00_01| |splitx_max_plugin_00_02| |splitx_max_plugin_00_03| |splitx_max_plugin_00_04| |splitx_max_plugin_00_05| |splitx_max_plugin_00_06| |splitx_max_plugin_00_07| |splitx_max_plugin_00_08| 

.. |splitx_max_plugin_00_00| image:: images/splitx_max_plugin_00_00.png
.. |splitx_max_plugin_00_01| image:: images/splitx_max_plugin_00_01.png
.. |splitx_max_plugin_00_02| image:: images/splitx_max_plugin_00_02.png
.. |splitx_max_plugin_00_03| image:: images/splitx_max_plugin_00_03.png
.. |splitx_max_plugin_00_04| image:: images/splitx_max_plugin_00_04.png
.. |splitx_max_plugin_00_05| image:: images/splitx_max_plugin_00_05.png
.. |splitx_max_plugin_00_06| image:: images/splitx_max_plugin_00_06.png
.. |splitx_max_plugin_00_07| image:: images/splitx_max_plugin_00_07.png
.. |splitx_max_plugin_00_08| image:: images/splitx_max_plugin_00_08.png


``splitx_right``
----------------

ImageList **splitx_right** ()


:Operates on: ``Image [OneBit]``
:Returns: ``ImageList``
:Category: Segmentation
:Defined in: segmentation.py
:Author: Michael Droettboom and Karl MacMillan


Splits an image vertically.

The split point is determined automatically
by finding a valley in the projections near the right of the image.

----------

**Example 1:** splitx_right()

.. image:: images/OneBit_generic.png

|splitx_right_plugin_00_00| |splitx_right_plugin_00_01| |splitx_right_plugin_00_02| |splitx_right_plugin_00_03| |splitx_right_plugin_00_04| |splitx_right_plugin_00_05| |splitx_right_plugin_00_06| 

.. |splitx_right_plugin_00_00| image:: images/splitx_right_plugin_00_00.png
.. |splitx_right_plugin_00_01| image:: images/splitx_right_plugin_00_01.png
.. |splitx_right_plugin_00_02| image:: images/splitx_right_plugin_00_02.png
.. |splitx_right_plugin_00_03| image:: images/splitx_right_plugin_00_03.png
.. |splitx_right_plugin_00_04| image:: images/splitx_right_plugin_00_04.png
.. |splitx_right_plugin_00_05| image:: images/splitx_right_plugin_00_05.png
.. |splitx_right_plugin_00_06| image:: images/splitx_right_plugin_00_06.png


``splity``
----------

ImageList **splity** (``double`` *center*)


:Operates on: ``Image [OneBit]``
:Returns: ``ImageList``
:Category: Segmentation
:Defined in: segmentation.py
:Author: Michael Droettboom and Karl MacMillan


Splits an image horizontally.

The split point is determined automatically
by finding a valley in the projections near the center of the image.

----------

**Example 1:** splity()

.. image:: images/OneBit_generic.png

|splity_plugin_00_00| |splity_plugin_00_01| |splity_plugin_00_02| |splity_plugin_00_03| |splity_plugin_00_04| |splity_plugin_00_05| |splity_plugin_00_06| 

.. |splity_plugin_00_00| image:: images/splity_plugin_00_00.png
.. |splity_plugin_00_01| image:: images/splity_plugin_00_01.png
.. |splity_plugin_00_02| image:: images/splity_plugin_00_02.png
.. |splity_plugin_00_03| image:: images/splity_plugin_00_03.png
.. |splity_plugin_00_04| image:: images/splity_plugin_00_04.png
.. |splity_plugin_00_05| image:: images/splity_plugin_00_05.png
.. |splity_plugin_00_06| image:: images/splity_plugin_00_06.png


``splity_bottom``
-----------------

ImageList **splity_bottom** ()


:Operates on: ``Image [OneBit]``
:Returns: ``ImageList``
:Category: Segmentation
:Defined in: segmentation.py
:Author: Michael Droettboom and Karl MacMillan


Splits an image horizontally.

The split point is determined automatically
by finding a valley in the projections near the bottom of the image.

----------

**Example 1:** splity_bottom()

.. image:: images/OneBit_generic.png

|splity_bottom_plugin_00_00| |splity_bottom_plugin_00_01| |splity_bottom_plugin_00_02| |splity_bottom_plugin_00_03| |splity_bottom_plugin_00_04| |splity_bottom_plugin_00_05| |splity_bottom_plugin_00_06| 

.. |splity_bottom_plugin_00_00| image:: images/splity_bottom_plugin_00_00.png
.. |splity_bottom_plugin_00_01| image:: images/splity_bottom_plugin_00_01.png
.. |splity_bottom_plugin_00_02| image:: images/splity_bottom_plugin_00_02.png
.. |splity_bottom_plugin_00_03| image:: images/splity_bottom_plugin_00_03.png
.. |splity_bottom_plugin_00_04| image:: images/splity_bottom_plugin_00_04.png
.. |splity_bottom_plugin_00_05| image:: images/splity_bottom_plugin_00_05.png
.. |splity_bottom_plugin_00_06| image:: images/splity_bottom_plugin_00_06.png


``splity_top``
--------------

ImageList **splity_top** ()


:Operates on: ``Image [OneBit]``
:Returns: ``ImageList``
:Category: Segmentation
:Defined in: segmentation.py
:Author: Michael Droettboom and Karl MacMillan


Splits an image horizontally.

The split point is determined automatically
by finding a valley in the projections near the top of the image.

----------

**Example 1:** splity_top()

.. image:: images/OneBit_generic.png

|splity_top_plugin_00_00| |splity_top_plugin_00_01| |splity_top_plugin_00_02| |splity_top_plugin_00_03| |splity_top_plugin_00_04| |splity_top_plugin_00_05| 

.. |splity_top_plugin_00_00| image:: images/splity_top_plugin_00_00.png
.. |splity_top_plugin_00_01| image:: images/splity_top_plugin_00_01.png
.. |splity_top_plugin_00_02| image:: images/splity_top_plugin_00_02.png
.. |splity_top_plugin_00_03| image:: images/splity_top_plugin_00_03.png
.. |splity_top_plugin_00_04| image:: images/splity_top_plugin_00_04.png
.. |splity_top_plugin_00_05| image:: images/splity_top_plugin_00_05.png



Thresholding
============

``abutaleb_threshold``
----------------------

Image [OneBit] **abutaleb_threshold** (``Choice[dense|rle]`` *storage format*)


:Operates on: ``Image [GreyScale]``
:Returns: ``Image [OneBit]``
:Category: Thresholding
:Defined in: threshold.py
:Author: Michael Droettboom and Karl MacMillan


Creates a binary image by using the Abutaleb locally-adaptive thresholding
algorithm.

*storage_format* (optional)
  specifies the compression type for the result:

  DENSE (0)
    no compression
  RLE (1)
    run-length encoding compression

----------

**Example 1:** abutaleb_threshold()

.. image:: images/GreyScale_generic.png

.. image:: images/abutaleb_threshold_plugin_00.png



``bernsen_threshold``
---------------------

Image [OneBit] **bernsen_threshold** (``Choice[dense|rle]`` *storage format*, ``int(1, 50)`` *region size*, ``int(0, 255)`` *contrast limit*, ``bool`` *doubt*)


:Operates on: ``Image [GreyScale]``
:Returns: ``Image [OneBit]``
:Category: Thresholding
:Defined in: threshold.py
:Author: Michael Droettboom and Karl MacMillan


Creates a binary image by using the Bernsen algorithm.

*storage_format* (optional)
  specifies the compression type for the result:

  DENSE (0)
    no compression
  RLE (1)
    run-length encoding compression

----------

**Example 1:** bernsen_threshold()

.. image:: images/GreyScale_generic.png

.. image:: images/bernsen_threshold_plugin_00.png



``otsu_find_threshold``
-----------------------

int **otsu_find_threshold** ()


:Operates on: ``Image [GreyScale]``
:Returns: ``int``
:Category: Thresholding
:Defined in: threshold.py
:Author: Michael Droettboom and Karl MacMillan


Finds a threshold point using the Otsu algorithm

----------

**Example 1:** otsu_find_threshold()

.. image:: images/GreyScale_generic.png

*result* = 143



``otsu_threshold``
------------------

Image [OneBit] **otsu_threshold** (``Choice[dense|rle]`` *storage format*)


:Operates on: ``Image [GreyScale]``
:Returns: ``Image [OneBit]``
:Category: Thresholding
:Defined in: threshold.py
:Author: Michael Droettboom and Karl MacMillan


Creates a binary image by splitting along a threshold value determined
using the Otsu algorithm.

Equivalent to ``image.threshold(image.otsu_find_threshold())``.

*storage_format* (optional)
  specifies the compression type for the result:

  DENSE (0)
    no compression
  RLE (1)
    run-length encoding compression

----------

**Example 1:** otsu_threshold()

.. image:: images/GreyScale_generic.png

.. image:: images/otsu_threshold_plugin_00.png



``threshold``
-------------

Image [OneBit] **threshold** (``int`` *threshold*, ``Choice[dense|rle]`` *storage format*)


:Operates on: ``Image [GreyScale|Grey16|Float]``
:Returns: ``Image [OneBit]``
:Category: Thresholding
:Defined in: threshold.py
:Author: Michael Droettboom and Karl MacMillan


Creates a binary image by splitting along a given threshold value.

Pixels that are greater than the given value become white.
Pixels less than the given value become black.

*storage_format* (optional)
  specifies the compression type for the result:

  DENSE (0)
    no compression
  RLE (1)
    run-length encoding compression

----------

**Example 1:** threshold(128,)

.. image:: images/GreyScale_generic.png

.. image:: images/threshold_plugin_00.png




Utility
=======


Combine
-------

``and_image``
`````````````

**and_image** (``Image [OneBit]`` *mask*)


:Operates on: ``Image [OneBit]``
:Category: Utility/Combine
:Defined in: logical.py
:Author: Michael Droettboom and Karl MacMillan


Perform the AND operation on two images.

  +---+---+---+
  | \ | 0 | 1 |
  +---+---+---+
  | 0 | 0 | 0 |
  +---+---+---+
  | 1 | 0 | 1 |
  +---+---+---+
  


``mask``
````````

Image [GreyScale|RGB] **mask** (``Image [OneBit]`` *mask*)


:Operates on: ``Image [GreyScale|RGB]``
:Returns: ``Image [GreyScale|RGB]``
:Category: Utility/Combine
:Defined in: image_utilities.py
:Author: Michael Droettboom and Karl MacMillan


Masks an image using the given ONEBIT image.  Parts of the ONEBIT
image that are white will be changed to white in the resulting image.


``or_image``
````````````

**or_image** (``Image [OneBit]`` *mask*)


:Operates on: ``Image [OneBit]``
:Category: Utility/Combine
:Defined in: logical.py
:Author: Michael Droettboom and Karl MacMillan


Perform the OR operation on two images.

  +---+---+---+
  | \ | 0 | 1 |
  +---+---+---+
  | 0 | 0 | 1 |
  +---+---+---+
  | 1 | 1 | 1 |
  +---+---+---+
  


``union_images``
````````````````

Image [OneBit] **union_images** (``ImageList`` *list_of_images*)


:Returns: ``Image [OneBit]``
:Category: Utility/Combine
:Defined in: image_utilities.py
:Author: Michael Droettboom and Karl MacMillan


Returns an image that is the union of the given list of connected components.


``xor_image``
`````````````

**xor_image** (``Image [OneBit]`` *mask*)


:Operates on: ``Image [OneBit]``
:Category: Utility/Combine
:Defined in: logical.py
:Author: Michael Droettboom and Karl MacMillan


Perform the XOR operation on two images.

  +---+---+---+
  | \ | 0 | 1 |
  +---+---+---+
  | 0 | 0 | 1 |
  +---+---+---+
  | 1 | 1 | 0 |
  +---+---+---+
  


``clip_image``
--------------

Image [OneBit|GreyScale|Grey16|RGB|Float] **clip_image** (``Image [OneBit|GreyScale|Grey16|RGB|Float]`` *other*)


:Operates on: ``Image [OneBit|GreyScale|Grey16|RGB|Float]``
:Returns: ``Image [OneBit|GreyScale|Grey16|RGB|Float]``
:Category: Utility
:Defined in: image_utilities.py
:Author: Michael Droettboom and Karl MacMillan


Crops an image so that the bounding box includes only the intersection of
it and another image.  Returns a zero-sized image if the two images do
not intersect.


``generate_features``
---------------------

**generate_features** (``Class`` *features*, ``bool`` *force*)


:Operates on: ``Image [OneBit]``
:Category: Utility
:Defined in: features.py
:Author: Michael Droettboom and Karl MacMillan


Generates features for the image by calling a number of feature functions
and storing the results in the image's ``features`` member variable (a Python ``array``).

*features*
  Optional.  A list of feature function names.  If not given, the previously
  set feature functions will be used.  If none were previously given,
  all available feature functions will be used.  Using all feature functions
  can also be forced by passing ``'all'``.

.. warning: For efficiency, if the given feature functions
  match those that have been already generated for the image, the
  features are *not* recalculated.  If you want to force recalculation,
  pass the optional argument ``force=True``.


``image_copy``
--------------

Image [OneBit|GreyScale|Grey16|RGB|Float] **image_copy** (``Choice[DENSE|RLE]`` *storage_format*)


:Operates on: ``Image [OneBit|GreyScale|Grey16|RGB|Float]``
:Returns: ``Image [OneBit|GreyScale|Grey16|RGB|Float]``
:Category: Utility
:Defined in: image_utilities.py
:Author: Michael Droettboom and Karl MacMillan


Copies an image along with all of its underlying data.  Since the data is
copied, changes to the new image do not affect the original image.

*storage_format*
  specifies the compression type for the returned copy:

  DENSE (0)
    no compression
  RLE (1)
    run-length encoding compression


``resize``
----------

Image [OneBit|GreyScale|Grey16|RGB|Float] **resize** (``int`` *nrows*, ``int`` *ncols*, ``Choice[None|Linear|Spline]`` *interp_type*)


:Operates on: ``Image [OneBit|GreyScale|Grey16|RGB|Float]``
:Returns: ``Image [OneBit|GreyScale|Grey16|RGB|Float]``
:Category: Utility
:Defined in: image_utilities.py
:Author: Michael Droettboom and Karl MacMillan


Returns a resized copy of an image. In addition to size, the type of
interpolation can be specified, with a tradeoff between speed
and quality.

If you need to maintain the aspect ratio of the original image,
consider using scale_ instead.

*nrows*
   The height of the resulting image.
*ncols*
   The width of the resulting image.
*interp_type* [None|Linear|Spline]
   The type of interpolation used to resize the image.  Each option is
   progressively higher quality, yet slower.


----------

**Example 1:** resize(96, 32, 3)

.. image:: images/RGB_generic.png

.. image:: images/resize_plugin_00.png



``scale``
---------

Image [OneBit|GreyScale|Grey16|RGB|Float] **scale** (``double`` *scaling*, ``Choice[None|Linear|Spline]`` *interp_type*)


:Operates on: ``Image [OneBit|GreyScale|Grey16|RGB|Float]``
:Returns: ``Image [OneBit|GreyScale|Grey16|RGB|Float]``
:Category: Utility
:Defined in: image_utilities.py
:Author: Michael Droettboom and Karl MacMillan


Returns a scaled copy of the image. In addition to scale, the type of
interpolation can be specified, with a tradeoff between speed
and quality.

If you need to change the aspect ratio of the original image,
consider using resize_ instead.

*scale*
   A scaling factor.  Values greater than 1 will result in a larger image.
   Values less than 1 will result in a smaller image.
*interp_type* [None|Linear|Spline]
   The type of interpolation used to resize the image.  Each option is
   progressively higher quality, yet slower.


----------

**Example 1:** scale(0.5, 3)

.. image:: images/RGB_generic.png

.. image:: images/scale_plugin_00.png

**Example 2:** scale(2.0, 3)

.. image:: images/RGB_generic.png

.. image:: images/scale_plugin_01.png




XML
===

``to_xml``
----------

String **to_xml** ()


:Operates on: ``Image [OneBit]``
:Returns: ``String``
:Category: XML
:Defined in: plugin.py
:Author: Michael Droettboom and Karl MacMillan


Returns a string containing the Gamera XML representation of the image.
(See the Gamera XML DTD in ``misc/gamera.dtd`` in the source distribution.)



``to_xml_filename``
-------------------

**to_xml_filename** (``FileSave`` *filename*)


:Operates on: ``Image [OneBit]``
:Category: XML
:Defined in: plugin.py
:Author: Michael Droettboom and Karl MacMillan


Saves the Gamera XML representation of the image to the given *filename*.
(See the Gamera XML DTD in ``misc/gamera.dtd`` in the source distribution.)



